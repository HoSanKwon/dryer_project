
dryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  080059e8  080059e8  000069e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f4  080067f4  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067fc  080067fc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067fc  080067fc  000077fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006804  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  2000006c  08006870  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08006870  000087d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013848  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003238  00000000  00000000  0001b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0001eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff9  00000000  00000000  0001ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e77  00000000  00000000  00020f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cf5  00000000  00000000  0003adf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbcf  00000000  00000000  00053ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e36b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b54  00000000  00000000  000e36f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080059d0 	.word	0x080059d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080059d0 	.word	0x080059d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2iz>:
 80004e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30f      	bcc.n	800050a <__aeabi_f2iz+0x2a>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d90d      	bls.n	8000510 <__aeabi_f2iz+0x30>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	bf18      	it	ne
 8000506:	4240      	negne	r0, r0
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr
 8000510:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000514:	d101      	bne.n	800051a <__aeabi_f2iz+0x3a>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d105      	bne.n	8000526 <__aeabi_f2iz+0x46>
 800051a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800051e:	bf08      	it	eq
 8000520:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr

0800052c <checkButton>:
#include "oledController.h"
#include "heaterController.h"

int count=0;

void checkButton(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

	 if(g_f_sw_up){
 8000530:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <checkButton+0x5c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d009      	beq.n	800054c <checkButton+0x20>
			//  printf("push g_f_sw_up\r\n");
			  g_f_sw_up=0;
 8000538:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <checkButton+0x5c>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
			  count++;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <checkButton+0x60>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a11      	ldr	r2, [pc, #68]	@ (800058c <checkButton+0x60>)
 8000546:	6013      	str	r3, [r2, #0]
			  temper_up();
 8000548:	f000 fc6e 	bl	8000e28 <temper_up>


		  }
		  if(g_f_sw_down){
 800054c:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <checkButton+0x64>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <checkButton+0x32>
			//  printf("push g_f_sw_down\r\n");
			  g_f_sw_down=0;
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <checkButton+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			  temper_down();
 800055a:	f000 fc7d 	bl	8000e58 <temper_down>
		  }

		  if(g_f_sw_fix){
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <checkButton+0x68>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <checkButton+0x48>
			//  printf("push g_f_sw_fix\r\n");
			  g_f_sw_fix=0;
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <checkButton+0x68>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
			  //HAL_GPIO_TogglePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin);
			  startToggle();
 800056c:	f000 ffc2 	bl	80014f4 <startToggle>
			  setFixedTemper();
 8000570:	f000 fc8a 	bl	8000e88 <setFixedTemper>
		  }

		  if(g_f_sw_on){
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <checkButton+0x6c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <checkButton+0x56>
			//  printf("push g_f_sw_on\r\n");
			  g_f_sw_on=0;
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <checkButton+0x6c>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
		  }


}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000da 	.word	0x200000da
 800058c:	20000088 	.word	0x20000088
 8000590:	200000db 	.word	0x200000db
 8000594:	200000dc 	.word	0x200000dc
 8000598:	200000dd 	.word	0x200000dd

0800059c <getSwState>:


ON_OFF_t getSwState(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PB12_START_SW_PIN_GPIO_Port, PB12_START_SW_PIN_Pin)){
 80005a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <getSwState+0x20>)
 80005a6:	f002 fb39 	bl	8002c1c <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <getSwState+0x18>
			return OFF_t;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <getSwState+0x1a>
	}else{
			return ON_t;
 80005b4:	2301      	movs	r3, #1
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	return m_init;
 80005c4:	4b02      	ldr	r3, [pc, #8]	@ (80005d0 <isTemperSensorInit+0x10>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	200000b0 	.word	0x200000b0

080005d4 <isBusy>:

uint8_t isBusy(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	return isBusyLine();
 80005d8:	f001 f88e 	bl	80016f8 <isBusyLine>
 80005dc:	4603      	mov	r3, r0
	//return m_busy;
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <isConverting>:

uint8_t isConverting(){
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

	return m_isConverting;
 80005e8:	4b02      	ldr	r3, [pc, #8]	@ (80005f4 <isConverting+0x10>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	200000b2 	.word	0x200000b2

080005f8 <Ds18b20_Init_Simple>:

bool    Ds18b20_Init_Simple(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
		m_init = 0;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <Ds18b20_Init_Simple+0x78>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000602:	2204      	movs	r2, #4
 8000604:	491b      	ldr	r1, [pc, #108]	@ (8000674 <Ds18b20_Init_Simple+0x7c>)
 8000606:	481c      	ldr	r0, [pc, #112]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000608:	f001 f8e8 	bl	80017dc <OneWire_Init>
		//OneWire_First(&OneWire);

		OneWire.ROM_NO[0] = 0x28;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 800060e:	2228      	movs	r2, #40	@ 0x28
 8000610:	725a      	strb	r2, [r3, #9]
		OneWire.ROM_NO[1] = 0x59;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000614:	2259      	movs	r2, #89	@ 0x59
 8000616:	729a      	strb	r2, [r3, #10]
		OneWire.ROM_NO[2] = 0x4d;
 8000618:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 800061a:	224d      	movs	r2, #77	@ 0x4d
 800061c:	72da      	strb	r2, [r3, #11]
		OneWire.ROM_NO[3] = 0x46;
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000620:	2246      	movs	r2, #70	@ 0x46
 8000622:	731a      	strb	r2, [r3, #12]
		OneWire.ROM_NO[4] = 0xd4;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000626:	22d4      	movs	r2, #212	@ 0xd4
 8000628:	735a      	strb	r2, [r3, #13]
		OneWire.ROM_NO[5] = 0x55;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 800062c:	2255      	movs	r2, #85	@ 0x55
 800062e:	739a      	strb	r2, [r3, #14]
		OneWire.ROM_NO[6] = 0x6f;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000632:	226f      	movs	r2, #111	@ 0x6f
 8000634:	73da      	strb	r2, [r3, #15]
		OneWire.ROM_NO[7] = 0x61;
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000638:	2261      	movs	r2, #97	@ 0x61
 800063a:	741a      	strb	r2, [r3, #16]
		OneWire_GetFullROM(&OneWire, temperSensor.Address);
 800063c:	490f      	ldr	r1, [pc, #60]	@ (800067c <Ds18b20_Init_Simple+0x84>)
 800063e:	480e      	ldr	r0, [pc, #56]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000640:	f001 fa20 	bl	8001a84 <OneWire_GetFullROM>

		Ds18b20Delay(50);
 8000644:	2032      	movs	r0, #50	@ 0x32
 8000646:	f002 f833 	bl	80026b0 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 800064a:	220c      	movs	r2, #12
 800064c:	490b      	ldr	r1, [pc, #44]	@ (800067c <Ds18b20_Init_Simple+0x84>)
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 8000650:	f000 f96e 	bl	8000930 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f002 f82b 	bl	80026b0 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 800065a:	4908      	ldr	r1, [pc, #32]	@ (800067c <Ds18b20_Init_Simple+0x84>)
 800065c:	4806      	ldr	r0, [pc, #24]	@ (8000678 <Ds18b20_Init_Simple+0x80>)
 800065e:	f000 f9ff 	bl	8000a60 <DS18B20_DisableAlarmTemperature>
		m_init = 1;
 8000662:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <Ds18b20_Init_Simple+0x78>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
		return true;
 8000668:	2301      	movs	r3, #1
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000b0 	.word	0x200000b0
 8000674:	40010800 	.word	0x40010800
 8000678:	2000009c 	.word	0x2000009c
 800067c:	2000008c 	.word	0x2000008c

08000680 <StartConverting>:
	return true;
}
#endif
//###########################################################################################

void StartConverting(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

	m_busy = 1;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <StartConverting+0x20>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <StartConverting+0x24>)
 800068c:	f000 f84a 	bl	8000724 <DS18B20_StartAll>
	m_isConverting = 1;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <StartConverting+0x28>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000696:	4b02      	ldr	r3, [pc, #8]	@ (80006a0 <StartConverting+0x20>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000b1 	.word	0x200000b1
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	200000b2 	.word	0x200000b2

080006ac <checkConverting>:

void checkConverting(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	m_busy = 1;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <checkConverting+0x2c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
	m_isConverting = !DS18B20_AllDone(&OneWire); //완료 1,비완료 0
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <checkConverting+0x30>)
 80006b8:	f000 fa2d 	bl	8000b16 <DS18B20_AllDone>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf0c      	ite	eq
 80006c2:	2301      	moveq	r3, #1
 80006c4:	2300      	movne	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <checkConverting+0x34>)
 80006cc:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 80006ce:	4b02      	ldr	r3, [pc, #8]	@ (80006d8 <checkConverting+0x2c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000b1 	.word	0x200000b1
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	200000b2 	.word	0x200000b2

080006e4 <getTemper>:

float getTemper(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

	Ds18b20Delay(100);
 80006e8:	2064      	movs	r0, #100	@ 0x64
 80006ea:	f001 ffe1 	bl	80026b0 <HAL_Delay>
	m_busy = 1;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <getTemper+0x30>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <getTemper+0x34>)
 80006f6:	4909      	ldr	r1, [pc, #36]	@ (800071c <getTemper+0x38>)
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <getTemper+0x3c>)
 80006fa:	f000 f827 	bl	800074c <DS18B20_Read>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <getTemper+0x38>)
 8000704:	731a      	strb	r2, [r3, #12]
	m_busy = 0;
 8000706:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <getTemper+0x30>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
	return temperSensor.Temperature;
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <getTemper+0x38>)
 800070e:	689b      	ldr	r3, [r3, #8]
}
 8000710:	4618      	mov	r0, r3
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000b1 	.word	0x200000b1
 8000718:	20000094 	.word	0x20000094
 800071c:	2000008c 	.word	0x2000008c
 8000720:	2000009c 	.word	0x2000009c

08000724 <DS18B20_StartAll>:
}



void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f001 f889 	bl	8001844 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000732:	21cc      	movs	r1, #204	@ 0xcc
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 f947 	bl	80019c8 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800073a:	2144      	movs	r1, #68	@ 0x44
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f001 f943 	bl	80019c8 <OneWire_WriteByte>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b08b      	sub	sp, #44	@ 0x2c
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	f000 f96c 	bl	8000a40 <DS18B20_Is>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <DS18B20_Read+0x26>
		return false;
 800076e:	2300      	movs	r3, #0
 8000770:	e0d8      	b.n	8000924 <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f001 f8ea 	bl	800194c <OneWire_ReadBit>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 800077e:	2300      	movs	r3, #0
 8000780:	e0d0      	b.n	8000924 <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f001 f85e 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f001 f95b 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000790:	21be      	movs	r1, #190	@ 0xbe
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f001 f918 	bl	80019c8 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8000798:	2300      	movs	r3, #0
 800079a:	77fb      	strb	r3, [r7, #31]
 800079c:	e00d      	b.n	80007ba <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 800079e:	7ffc      	ldrb	r4, [r7, #31]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f001 f92f 	bl	8001a04 <OneWire_ReadByte>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80007ae:	443b      	add	r3, r7
 80007b0:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	3301      	adds	r3, #1
 80007b8:	77fb      	strb	r3, [r7, #31]
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
 80007bc:	2b08      	cmp	r3, #8
 80007be:	d9ee      	bls.n	800079e <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2108      	movs	r1, #8
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f978 	bl	8001abc <OneWire_CRC8>
 80007cc:	4603      	mov	r3, r0
 80007ce:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80007d0:	7f3b      	ldrb	r3, [r7, #28]
 80007d2:	7fba      	ldrb	r2, [r7, #30]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d001      	beq.n	80007dc <DS18B20_Read+0x90>
		/* CRC invalid */
		return false;
 80007d8:	2300      	movs	r3, #0
 80007da:	e0a3      	b.n	8000924 <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80007dc:	7d3b      	ldrb	r3, [r7, #20]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	7d7b      	ldrb	r3, [r7, #21]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f001 f829 	bl	8001844 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80007f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da05      	bge.n	8000806 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80007fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007fc:	425b      	negs	r3, r3
 80007fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8000806:	7e3b      	ldrb	r3, [r7, #24]
 8000808:	115b      	asrs	r3, r3, #5
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	3309      	adds	r3, #9
 8000814:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8000816:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	b29b      	uxth	r3, r3
 800081c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000820:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000822:	0a1b      	lsrs	r3, r3, #8
 8000824:	b29b      	uxth	r3, r3
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	b25b      	sxtb	r3, r3
 800082a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800082e:	b25a      	sxtb	r2, r3
 8000830:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000834:	4313      	orrs	r3, r2
 8000836:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 800083a:	7f7b      	ldrb	r3, [r7, #29]
 800083c:	3b09      	subs	r3, #9
 800083e:	2b03      	cmp	r3, #3
 8000840:	d850      	bhi.n	80008e4 <DS18B20_Read+0x198>
 8000842:	a201      	add	r2, pc, #4	@ (adr r2, 8000848 <DS18B20_Read+0xfc>)
 8000844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000848:	08000859 	.word	0x08000859
 800084c:	0800087d 	.word	0x0800087d
 8000850:	080008a1 	.word	0x080008a1
 8000854:	080008c5 	.word	0x080008c5
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8000858:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b29b      	uxth	r3, r3
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fde8 	bl	8000438 <__aeabi_i2f>
 8000868:	4603      	mov	r3, r0
 800086a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 800086c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000870:	6a38      	ldr	r0, [r7, #32]
 8000872:	f7ff fc73 	bl	800015c <__aeabi_fmul>
 8000876:	4603      	mov	r3, r0
 8000878:	623b      	str	r3, [r7, #32]
		break;
 800087a:	e038      	b.n	80008ee <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 800087c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	b29b      	uxth	r3, r3
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fdd6 	bl	8000438 <__aeabi_i2f>
 800088c:	4603      	mov	r3, r0
 800088e:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000890:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000894:	6a38      	ldr	r0, [r7, #32]
 8000896:	f7ff fc61 	bl	800015c <__aeabi_fmul>
 800089a:	4603      	mov	r3, r0
 800089c:	623b      	str	r3, [r7, #32]
		 break;
 800089e:	e026      	b.n	80008ee <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 80008a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fdc4 	bl	8000438 <__aeabi_i2f>
 80008b0:	4603      	mov	r3, r0
 80008b2:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80008b4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80008b8:	6a38      	ldr	r0, [r7, #32]
 80008ba:	f7ff fc4f 	bl	800015c <__aeabi_fmul>
 80008be:	4603      	mov	r3, r0
 80008c0:	623b      	str	r3, [r7, #32]
		break;
 80008c2:	e014      	b.n	80008ee <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 80008c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fdb4 	bl	8000438 <__aeabi_i2f>
 80008d0:	4603      	mov	r3, r0
 80008d2:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80008d4:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80008d8:	6a38      	ldr	r0, [r7, #32]
 80008da:	f7ff fc3f 	bl	800015c <__aeabi_fmul>
 80008de:	4603      	mov	r3, r0
 80008e0:	623b      	str	r3, [r7, #32]
		 break;
 80008e2:	e004      	b.n	80008ee <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <DS18B20_Read+0x1e0>)
 80008e6:	623b      	str	r3, [r7, #32]
			digit = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80008ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fda0 	bl	8000438 <__aeabi_i2f>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4619      	mov	r1, r3
 80008fc:	6a38      	ldr	r0, [r7, #32]
 80008fe:	f7ff fce7 	bl	80002d0 <__addsf3>
 8000902:	4603      	mov	r3, r0
 8000904:	623b      	str	r3, [r7, #32]
	if (minus) 
 8000906:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800090a:	2b00      	cmp	r3, #0
 800090c:	d006      	beq.n	800091c <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 800090e:	6a39      	ldr	r1, [r7, #32]
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	f7ff fcda 	bl	80002cc <__aeabi_fsub>
 8000918:	4603      	mov	r3, r0
 800091a:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a3a      	ldr	r2, [r7, #32]
 8000920:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	372c      	adds	r7, #44	@ 0x2c
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	437f0000 	.word	0x437f0000

08000930 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	4613      	mov	r3, r2
 800093c:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 800093e:	68b8      	ldr	r0, [r7, #8]
 8000940:	f000 f87e 	bl	8000a40 <DS18B20_Is>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <DS18B20_SetResolution+0x1e>
		return 0;
 800094a:	2300      	movs	r3, #0
 800094c:	e074      	b.n	8000a38 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 ff78 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f001 f875 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800095c:	21be      	movs	r1, #190	@ 0xbe
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f001 f832 	bl	80019c8 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f001 f84d 	bl	8001a04 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f001 f84a 	bl	8001a04 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f001 f847 	bl	8001a04 <OneWire_ReadByte>
 8000976:	4603      	mov	r3, r0
 8000978:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f001 f842 	bl	8001a04 <OneWire_ReadByte>
 8000980:	4603      	mov	r3, r0
 8000982:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f001 f83d 	bl	8001a04 <OneWire_ReadByte>
 800098a:	4603      	mov	r3, r0
 800098c:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b09      	cmp	r3, #9
 8000992:	d108      	bne.n	80009a6 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800099a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	f023 0320 	bic.w	r3, r3, #32
 80009a2:	75fb      	strb	r3, [r7, #23]
 80009a4:	e022      	b.n	80009ec <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b0a      	cmp	r3, #10
 80009aa:	d108      	bne.n	80009be <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009b2:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	75fb      	strb	r3, [r7, #23]
 80009bc:	e016      	b.n	80009ec <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b0b      	cmp	r3, #11
 80009c2:	d108      	bne.n	80009d6 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ca:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	f023 0320 	bic.w	r3, r3, #32
 80009d2:	75fb      	strb	r3, [r7, #23]
 80009d4:	e00a      	b.n	80009ec <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b0c      	cmp	r3, #12
 80009da:	d107      	bne.n	80009ec <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
 80009de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e2:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 ff29 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80009f2:	68b9      	ldr	r1, [r7, #8]
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f001 f826 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80009fa:	214e      	movs	r1, #78	@ 0x4e
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 ffe3 	bl	80019c8 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000a02:	7dbb      	ldrb	r3, [r7, #22]
 8000a04:	4619      	mov	r1, r3
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f000 ffde 	bl	80019c8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000a0c:	7d7b      	ldrb	r3, [r7, #21]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 ffd9 	bl	80019c8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 ffd4 	bl	80019c8 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f000 ff0f 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a26:	68b9      	ldr	r1, [r7, #8]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f001 f80c 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000a2e:	2148      	movs	r1, #72	@ 0x48
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 ffc9 	bl	80019c8 <OneWire_WriteByte>
	
	return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b28      	cmp	r3, #40	@ 0x28
 8000a4e:	d101      	bne.n	8000a54 <DS18B20_Is+0x14>
		return 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <DS18B20_Is+0x16>
	
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f7ff ffe8 	bl	8000a40 <DS18B20_Is>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e049      	b.n	8000b0e <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fee2 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a80:	6839      	ldr	r1, [r7, #0]
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 ffdf 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000a88:	21be      	movs	r1, #190	@ 0xbe
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 ff9c 	bl	80019c8 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 ffb7 	bl	8001a04 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 ffb4 	bl	8001a04 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 ffb1 	bl	8001a04 <OneWire_ReadByte>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 ffac 	bl	8001a04 <OneWire_ReadByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 ffa7 	bl	8001a04 <OneWire_ReadByte>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8000aba:	237d      	movs	r3, #125	@ 0x7d
 8000abc:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000abe:	23c9      	movs	r3, #201	@ 0xc9
 8000ac0:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 febe 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ac8:	6839      	ldr	r1, [r7, #0]
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 ffbb 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000ad0:	214e      	movs	r1, #78	@ 0x4e
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 ff78 	bl	80019c8 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	4619      	mov	r1, r3
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 ff73 	bl	80019c8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000ae2:	7bbb      	ldrb	r3, [r7, #14]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 ff6e 	bl	80019c8 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000aec:	7b7b      	ldrb	r3, [r7, #13]
 8000aee:	4619      	mov	r1, r3
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 ff69 	bl	80019c8 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 fea4 	bl	8001844 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 ffa1 	bl	8001a46 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000b04:	2148      	movs	r1, #72	@ 0x48
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 ff5e 	bl	80019c8 <OneWire_WriteByte>
	
	return 1;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 ff14 	bl	800194c <OneWire_ReadBit>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <getCurrentTemper>:

float getCurrentTemper(){
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

	return temperSensor.Temperature;
 8000b34:	4b02      	ldr	r3, [pc, #8]	@ (8000b40 <getCurrentTemper+0x10>)
 8000b36:	689b      	ldr	r3, [r3, #8]

}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <init_fnd>:
#include "fnd_controller.h"

uint8_t _LED_0F[29];
static SPI_HandleTypeDef * m_hspi;

void init_fnd(SPI_HandleTypeDef * hspi) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	_LED_0F[0] = 0xC0; //0
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <init_fnd+0xc8>)
 8000b4e:	22c0      	movs	r2, #192	@ 0xc0
 8000b50:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8000b52:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <init_fnd+0xc8>)
 8000b54:	22f9      	movs	r2, #249	@ 0xf9
 8000b56:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <init_fnd+0xc8>)
 8000b5a:	22a4      	movs	r2, #164	@ 0xa4
 8000b5c:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <init_fnd+0xc8>)
 8000b60:	22b0      	movs	r2, #176	@ 0xb0
 8000b62:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8000b64:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <init_fnd+0xc8>)
 8000b66:	2299      	movs	r2, #153	@ 0x99
 8000b68:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <init_fnd+0xc8>)
 8000b6c:	2292      	movs	r2, #146	@ 0x92
 8000b6e:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <init_fnd+0xc8>)
 8000b72:	2282      	movs	r2, #130	@ 0x82
 8000b74:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <init_fnd+0xc8>)
 8000b78:	22f8      	movs	r2, #248	@ 0xf8
 8000b7a:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <init_fnd+0xc8>)
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <init_fnd+0xc8>)
 8000b84:	2290      	movs	r2, #144	@ 0x90
 8000b86:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <init_fnd+0xc8>)
 8000b8a:	2288      	movs	r2, #136	@ 0x88
 8000b8c:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <init_fnd+0xc8>)
 8000b90:	2283      	movs	r2, #131	@ 0x83
 8000b92:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <init_fnd+0xc8>)
 8000b96:	22c6      	movs	r2, #198	@ 0xc6
 8000b98:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <init_fnd+0xc8>)
 8000b9c:	22a1      	movs	r2, #161	@ 0xa1
 8000b9e:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <init_fnd+0xc8>)
 8000ba2:	2286      	movs	r2, #134	@ 0x86
 8000ba4:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <init_fnd+0xc8>)
 8000ba8:	228e      	movs	r2, #142	@ 0x8e
 8000baa:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <init_fnd+0xc8>)
 8000bae:	22c2      	movs	r2, #194	@ 0xc2
 8000bb0:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <init_fnd+0xc8>)
 8000bb4:	2289      	movs	r2, #137	@ 0x89
 8000bb6:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <init_fnd+0xc8>)
 8000bba:	22f9      	movs	r2, #249	@ 0xf9
 8000bbc:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <init_fnd+0xc8>)
 8000bc0:	22f1      	movs	r2, #241	@ 0xf1
 8000bc2:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <init_fnd+0xc8>)
 8000bc6:	22c3      	movs	r2, #195	@ 0xc3
 8000bc8:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <init_fnd+0xc8>)
 8000bcc:	22a9      	movs	r2, #169	@ 0xa9
 8000bce:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <init_fnd+0xc8>)
 8000bd2:	22c0      	movs	r2, #192	@ 0xc0
 8000bd4:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <init_fnd+0xc8>)
 8000bd8:	228c      	movs	r2, #140	@ 0x8c
 8000bda:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <init_fnd+0xc8>)
 8000bde:	2298      	movs	r2, #152	@ 0x98
 8000be0:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <init_fnd+0xc8>)
 8000be4:	2292      	movs	r2, #146	@ 0x92
 8000be6:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <init_fnd+0xc8>)
 8000bea:	22c1      	movs	r2, #193	@ 0xc1
 8000bec:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <init_fnd+0xc8>)
 8000bf0:	2291      	movs	r2, #145	@ 0x91
 8000bf2:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <init_fnd+0xc8>)
 8000bf6:	22fe      	movs	r2, #254	@ 0xfe
 8000bf8:	771a      	strb	r2, [r3, #28]
	m_hspi = hspi;
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <init_fnd+0xcc>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000b4 	.word	0x200000b4
 8000c10:	200000d4 	.word	0x200000d4

08000c14 <send>:
//	_LED_0F[26] = 0xC1; //U
//	_LED_0F[27] = 0x91; //Y
//	_LED_0F[28] = 0xFE; //hight -
//}

void send(uint8_t X) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
//		}
//		X <<= 1;
//		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
//		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
//	}
	HAL_SPI_Transmit(m_hspi, &X, 1, 100);
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <send+0x20>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	1df9      	adds	r1, r7, #7
 8000c24:	2364      	movs	r3, #100	@ 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	f003 faa8 	bl	800417c <HAL_SPI_Transmit>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000d4 	.word	0x200000d4

08000c38 <send_port>:


 void send_port(uint8_t X, uint8_t port)
 {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
 send(X);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffe2 	bl	8000c14 <send>
 send(port);
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffde 	bl	8000c14 <send>
 HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <send_port+0x40>)
 8000c60:	f001 fff3 	bl	8002c4a <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c6a:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <send_port+0x40>)
 8000c6c:	f001 ffed 	bl	8002c4a <HAL_GPIO_WritePin>
 }
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010c00 	.word	0x40010c00

08000c7c <digit4_temper>:
		}
	}
}

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;

	n1 = (int) temper % 10;
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc0 <digit4_temper+0x144>)
 8000c88:	fb83 1302 	smull	r1, r3, r3, r2
 8000c8c:	1099      	asrs	r1, r3, #2
 8000c8e:	17d3      	asrs	r3, r2, #31
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	460b      	mov	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4b48      	ldr	r3, [pc, #288]	@ (8000dc4 <digit4_temper+0x148>)
 8000ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca6:	1159      	asrs	r1, r3, #5
 8000ca8:	17d3      	asrs	r3, r2, #31
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	2164      	movs	r1, #100	@ 0x64
 8000cae:	fb01 f303 	mul.w	r3, r1, r3
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4a42      	ldr	r2, [pc, #264]	@ (8000dc0 <digit4_temper+0x144>)
 8000cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cba:	1092      	asrs	r2, r2, #2
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper)) / 100;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc4 <digit4_temper+0x148>)
 8000cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cca:	1152      	asrs	r2, r2, #5
 8000ccc:	17db      	asrs	r3, r3, #31
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper)) / 1000;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dc8 <digit4_temper+0x14c>)
 8000cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cda:	1192      	asrs	r2, r2, #6
 8000cdc:	17db      	asrs	r3, r3, #31
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <digit4_temper+0x150>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d838      	bhi.n	8000d5c <digit4_temper+0xe0>
 8000cea:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf0 <digit4_temper+0x74>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d01 	.word	0x08000d01
 8000cf4:	08000d13 	.word	0x08000d13
 8000cf8:	08000d2b 	.word	0x08000d2b
 8000cfc:	08000d43 	.word	0x08000d43

	case 0:
		send_port(_LED_0F[n1], 0b0001); //0
 8000d00:	4a33      	ldr	r2, [pc, #204]	@ (8000dd0 <digit4_temper+0x154>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff94 	bl	8000c38 <send_port>
		break;
 8000d10:	e029      	b.n	8000d66 <digit4_temper+0xea>
	case 1:
		send_port(_LED_0F[n2] & 0x7F, 0b0010); //1
 8000d12:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <digit4_temper+0x154>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff88 	bl	8000c38 <send_port>
		break;
 8000d28:	e01d      	b.n	8000d66 <digit4_temper+0xea>
	case 2:
		if (temper > 99) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b63      	cmp	r3, #99	@ 0x63
 8000d2e:	dd17      	ble.n	8000d60 <digit4_temper+0xe4>
			send_port(_LED_0F[n3], 0b0100);
 8000d30:	4a27      	ldr	r2, [pc, #156]	@ (8000dd0 <digit4_temper+0x154>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff7c 	bl	8000c38 <send_port>
		}
		break;
 8000d40:	e00e      	b.n	8000d60 <digit4_temper+0xe4>
	case 3:
		if (temper > 999) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d48:	db0c      	blt.n	8000d64 <digit4_temper+0xe8>
			send_port(_LED_0F[n4], 0b1000);
 8000d4a:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <digit4_temper+0x154>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2108      	movs	r1, #8
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff6f 	bl	8000c38 <send_port>
		}
		break;
 8000d5a:	e003      	b.n	8000d64 <digit4_temper+0xe8>
	default:
		break;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <digit4_temper+0xea>
		break;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <digit4_temper+0xea>
		break;
 8000d64:	bf00      	nop
	}

	m_tempercount++;
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <digit4_temper+0x150>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <digit4_temper+0x150>)
 8000d70:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d78:	db07      	blt.n	8000d8a <digit4_temper+0x10e>
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <digit4_temper+0x150>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d903      	bls.n	8000d8a <digit4_temper+0x10e>
		m_tempercount = 0;
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <digit4_temper+0x150>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e015      	b.n	8000db6 <digit4_temper+0x13a>
	}else if(temper > 99 && m_tempercount >= 3){
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b63      	cmp	r3, #99	@ 0x63
 8000d8e:	dd07      	ble.n	8000da0 <digit4_temper+0x124>
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <digit4_temper+0x150>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d903      	bls.n	8000da0 <digit4_temper+0x124>
		m_tempercount = 0;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <digit4_temper+0x150>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e00a      	b.n	8000db6 <digit4_temper+0x13a>
	}else if(temper <= 99 && m_tempercount >= 2){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b63      	cmp	r3, #99	@ 0x63
 8000da4:	dc07      	bgt.n	8000db6 <digit4_temper+0x13a>
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <digit4_temper+0x150>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d903      	bls.n	8000db6 <digit4_temper+0x13a>
		m_tempercount = 0;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <digit4_temper+0x150>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	}

}
 8000db4:	e7ff      	b.n	8000db6 <digit4_temper+0x13a>
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	66666667 	.word	0x66666667
 8000dc4:	51eb851f 	.word	0x51eb851f
 8000dc8:	10624dd3 	.word	0x10624dd3
 8000dcc:	200000d8 	.word	0x200000d8
 8000dd0:	200000b4 	.word	0x200000b4

08000dd4 <heaterControl>:
void initHeater(){
	m_state=0;
	heaterOnOff(OFF_t);
}

void heaterControl(float temper){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

	if(m_state){
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <heaterControl+0x4c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00c      	beq.n	8000dfe <heaterControl+0x2a>

		if((int)temper >= (m_fixed_temper - GOING_UP_GAP)){
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fb7b 	bl	80004e0 <__aeabi_f2iz>
 8000dea:	4602      	mov	r2, r0
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <heaterControl+0x50>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b05      	subs	r3, #5
 8000df2:	429a      	cmp	r2, r3
 8000df4:	db0f      	blt.n	8000e16 <heaterControl+0x42>
				heaterOnOff(OFF_t);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f85e 	bl	8000eb8 <heaterOnOff>
			heaterOnOff(ON_t);
		}
	}


}
 8000dfc:	e00b      	b.n	8000e16 <heaterControl+0x42>
		if((int)temper <  m_fixed_temper - GOING_DOWN_GAP){
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fb6e 	bl	80004e0 <__aeabi_f2iz>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <heaterControl+0x50>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	da02      	bge.n	8000e16 <heaterControl+0x42>
			heaterOnOff(ON_t);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 f851 	bl	8000eb8 <heaterOnOff>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000d9 	.word	0x200000d9
 8000e24:	2000000c 	.word	0x2000000c

08000e28 <temper_up>:

void temper_up(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

	m_desired_temper++;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <temper_up+0x2c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a08      	ldr	r2, [pc, #32]	@ (8000e54 <temper_up+0x2c>)
 8000e34:	6013      	str	r3, [r2, #0]
	if(m_desired_temper > 99){
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <temper_up+0x2c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b63      	cmp	r3, #99	@ 0x63
 8000e3c:	dd02      	ble.n	8000e44 <temper_up+0x1c>
		m_desired_temper = 0;
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <temper_up+0x2c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <temper_up+0x2c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fc07 	bl	800165c <printTemper>

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <temper_down>:

void temper_down(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	m_desired_temper--;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <temper_down+0x2c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <temper_down+0x2c>)
 8000e64:	6013      	str	r3, [r2, #0]
	if(m_desired_temper < 0){
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <temper_down+0x2c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	da02      	bge.n	8000e74 <temper_down+0x1c>
		m_desired_temper = 99;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <temper_down+0x2c>)
 8000e70:	2263      	movs	r2, #99	@ 0x63
 8000e72:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <temper_down+0x2c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fbef 	bl	800165c <printTemper>

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <setFixedTemper>:



void setFixedTemper(){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	m_fixed_temper = m_desired_temper;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <setFixedTemper+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a03      	ldr	r2, [pc, #12]	@ (8000ea0 <setFixedTemper+0x18>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	2000000c 	.word	0x2000000c

08000ea4 <getFixedTemper>:

int getFixedTemper(void){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	return m_desired_temper;
 8000ea8:	4b02      	ldr	r3, [pc, #8]	@ (8000eb4 <getFixedTemper+0x10>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <heaterOnOff>:


void heaterOnOff(uint8_t onOff){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin,onOff);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <heaterOnOff+0x44>)
 8000eca:	f001 febe 	bl	8002c4a <HAL_GPIO_WritePin>
	m_state = onOff;
 8000ece:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <heaterOnOff+0x48>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	7013      	strb	r3, [r2, #0]

	if(onOff == ON_t){
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d106      	bne.n	8000ee8 <heaterOnOff+0x30>
		led2OnOff(ON_t);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 f838 	bl	8000f50 <led2OnOff>
		printHeaterState(ON_t);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 fbe5 	bl	80016b0 <printHeaterState>
	}else{
		led2OnOff(OFF_t);
		printHeaterState(OFF_t);
	}

}
 8000ee6:	e005      	b.n	8000ef4 <heaterOnOff+0x3c>
		led2OnOff(OFF_t);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 f831 	bl	8000f50 <led2OnOff>
		printHeaterState(OFF_t);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 fbde 	bl	80016b0 <printHeaterState>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	200000d9 	.word	0x200000d9

08000f04 <getHeaterState>:


uint8_t getHeaterState(){
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	return m_state;
 8000f08:	4b02      	ldr	r3, [pc, #8]	@ (8000f14 <getHeaterState+0x10>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	200000d9 	.word	0x200000d9

08000f18 <led1OnOff>:
#include "ledController.h"


void led1OnOff(ON_OFF_t on_off){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]

	if(on_off == ON_t){
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <led1OnOff+0x1c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2140      	movs	r1, #64	@ 0x40
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <led1OnOff+0x34>)
 8000f2e:	f001 fe8c 	bl	8002c4a <HAL_GPIO_WritePin>
	}else if(on_off == OFF_t){
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
	}

}
 8000f32:	e007      	b.n	8000f44 <led1OnOff+0x2c>
	}else if(on_off == OFF_t){
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <led1OnOff+0x2c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2140      	movs	r1, #64	@ 0x40
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <led1OnOff+0x34>)
 8000f40:	f001 fe83 	bl	8002c4a <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <led2OnOff>:


void led2OnOff(ON_OFF_t on_off){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	if(on_off == ON_t){
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d105      	bne.n	8000f6c <led2OnOff+0x1c>
		HAL_GPIO_WritePin(PB7_LED2_GPIO_Port, PB7_LED2_Pin, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <led2OnOff+0x34>)
 8000f66:	f001 fe70 	bl	8002c4a <HAL_GPIO_WritePin>
	}else if(on_off == OFF_t){
		HAL_GPIO_WritePin(PB7_LED2_GPIO_Port, PB7_LED2_Pin, 1);
	}
}
 8000f6a:	e007      	b.n	8000f7c <led2OnOff+0x2c>
	}else if(on_off == OFF_t){
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <led2OnOff+0x2c>
		HAL_GPIO_WritePin(PB7_LED2_GPIO_Port, PB7_LED2_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <led2OnOff+0x34>)
 8000f78:	f001 fe67 	bl	8002c4a <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010c00 	.word	0x40010c00

08000f88 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	float temper = 0.0;
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f94:	f001 fb2a 	bl	80025ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f98:	f000 f85c 	bl	8001054 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f9c:	f000 f9c6 	bl	800132c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000fa0:	f000 f99a 	bl	80012d8 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000fa4:	f000 f900 	bl	80011a8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000fa8:	f000 f94a 	bl	8001240 <MX_TIM3_Init>
	MX_I2C2_Init();
 8000fac:	f000 f898 	bl	80010e0 <MX_I2C2_Init>
	MX_SPI2_Init();
 8000fb0:	f000 f8c4 	bl	800113c <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 8000fb4:	f000 fdd0 	bl	8001b58 <SSD1306_Init>
	opening();
 8000fb8:	f000 fa66 	bl	8001488 <opening>

	init_fnd(&hspi2);
 8000fbc:	4821      	ldr	r0, [pc, #132]	@ (8001044 <main+0xbc>)
 8000fbe:	f7ff fdc1 	bl	8000b44 <init_fnd>

	HAL_TIM_Base_Start_IT(&htim3);
 8000fc2:	4821      	ldr	r0, [pc, #132]	@ (8001048 <main+0xc0>)
 8000fc4:	f003 fb70 	bl	80046a8 <HAL_TIM_Base_Start_IT>
	Ds18b20_Init_Simple();
 8000fc8:	f7ff fb16 	bl	80005f8 <Ds18b20_Init_Simple>

	static int m_count = 0;
	static int m_first = 0;
	while (1) {

		checkButton();
 8000fcc:	f7ff faae 	bl	800052c <checkButton>

		if ((m_count > 100) || !m_first) {
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <main+0xc4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b64      	cmp	r3, #100	@ 0x64
 8000fd6:	dc03      	bgt.n	8000fe0 <main+0x58>
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <main+0xc8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d127      	bne.n	8001030 <main+0xa8>
			if (!isConverting()) {
 8000fe0:	f7ff fb00 	bl	80005e4 <isConverting>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <main+0x66>
				StartConverting();
 8000fea:	f7ff fb49 	bl	8000680 <StartConverting>
			}

			checkConverting();
 8000fee:	f7ff fb5d 	bl	80006ac <checkConverting>

			if (!isConverting()) {
 8000ff2:	f7ff faf7 	bl	80005e4 <isConverting>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d119      	bne.n	8001030 <main+0xa8>
				temper = getTemper();
 8000ffc:	f7ff fb72 	bl	80006e4 <getTemper>
 8001000:	6078      	str	r0, [r7, #4]
				if (getSwState() == ON_t) {
 8001002:	f7ff facb 	bl	800059c <getSwState>
 8001006:	4603      	mov	r3, r0
 8001008:	2b01      	cmp	r3, #1
 800100a:	d103      	bne.n	8001014 <main+0x8c>
					heaterControl(temper);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fee1 	bl	8000dd4 <heaterControl>
 8001012:	e007      	b.n	8001024 <main+0x9c>
				} else {
					if (getHeaterState() == ON_t) {
 8001014:	f7ff ff76 	bl	8000f04 <getHeaterState>
 8001018:	4603      	mov	r3, r0
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <main+0x9c>
						heaterOnOff(OFF_t);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ff4a 	bl	8000eb8 <heaterOnOff>
					}
				}
				m_count = 0;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <main+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
				m_first = 1;
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <main+0xc8>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
			}
		}

		m_count++;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <main+0xc4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <main+0xc4>)
 8001038:	6013      	str	r3, [r2, #0]
		HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f001 fb38 	bl	80026b0 <HAL_Delay>
		checkButton();
 8001040:	e7c4      	b.n	8000fcc <main+0x44>
 8001042:	bf00      	nop
 8001044:	20000134 	.word	0x20000134
 8001048:	200001d4 	.word	0x200001d4
 800104c:	20000264 	.word	0x20000264
 8001050:	20000268 	.word	0x20000268

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	@ 0x40
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2228      	movs	r2, #40	@ 0x28
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 f824 	bl	80050b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800107e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001092:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fbd9 	bl	8003854 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010a8:	f000 f9e8 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fe46 	bl	8003d58 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010d2:	f000 f9d3 	bl	800147c <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	@ 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C2_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <MX_I2C2_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_I2C2_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_I2C2_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_I2C2_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_I2C2_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_I2C2_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_I2C2_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_I2C2_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_I2C2_Init+0x50>)
 800111e:	f001 fdcf 	bl	8002cc0 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 f9a8 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000e0 	.word	0x200000e0
 8001134:	40005800 	.word	0x40005800
 8001138:	00061a80 	.word	0x00061a80

0800113c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <MX_SPI2_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001148:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_SPI2_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001170:	2218      	movs	r2, #24
 8001172:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_SPI2_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_SPI2_Init+0x64>)
 8001188:	220a      	movs	r2, #10
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_SPI2_Init+0x64>)
 800118e:	f002 ff71 	bl	8004074 <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001198:	f000 f970 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000134 	.word	0x20000134
 80011a4:	40003800 	.word	0x40003800

080011a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_TIM2_Init+0x94>)
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_TIM2_Init+0x94>)
 80011ce:	2247      	movs	r2, #71	@ 0x47
 80011d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_TIM2_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_TIM2_Init+0x94>)
 80011da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_TIM2_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_TIM2_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ec:	4813      	ldr	r0, [pc, #76]	@ (800123c <MX_TIM2_Init+0x94>)
 80011ee:	f003 f9c2 	bl	8004576 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f8:	f000 f940 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <MX_TIM2_Init+0x94>)
 800120a:	f003 fb8f 	bl	800492c <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001214:	f000 f932 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_TIM2_Init+0x94>)
 8001226:	f003 fd79 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001230:	f000 f924 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000018c 	.word	0x2000018c

08001240 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_TIM3_Init+0x90>)
 800125e:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_TIM3_Init+0x90>)
 8001264:	2247      	movs	r2, #71	@ 0x47
 8001266:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <MX_TIM3_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM3_Init+0x90>)
 8001270:	2263      	movs	r2, #99	@ 0x63
 8001272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_TIM3_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_TIM3_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001280:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_TIM3_Init+0x90>)
 8001282:	f003 f978 	bl	8004576 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800128c:	f000 f8f6 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM3_Init+0x90>)
 800129e:	f003 fb45 	bl	800492c <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80012a8:	f000 f8e8 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM3_Init+0x90>)
 80012ba:	f003 fd2f 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80012c4:	f000 f8da 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200001d4 	.word	0x200001d4
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <MX_USART1_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_USART1_UART_Init+0x4c>)
 8001310:	f003 fd74 	bl	8004dfc <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f8af 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000021c 	.word	0x2000021c
 8001328:	40013800 	.word	0x40013800

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b4a      	ldr	r3, [pc, #296]	@ (800146c <MX_GPIO_Init+0x140>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a49      	ldr	r2, [pc, #292]	@ (800146c <MX_GPIO_Init+0x140>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b47      	ldr	r3, [pc, #284]	@ (800146c <MX_GPIO_Init+0x140>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b44      	ldr	r3, [pc, #272]	@ (800146c <MX_GPIO_Init+0x140>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a43      	ldr	r2, [pc, #268]	@ (800146c <MX_GPIO_Init+0x140>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b41      	ldr	r3, [pc, #260]	@ (800146c <MX_GPIO_Init+0x140>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b3e      	ldr	r3, [pc, #248]	@ (800146c <MX_GPIO_Init+0x140>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a3d      	ldr	r2, [pc, #244]	@ (800146c <MX_GPIO_Init+0x140>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <MX_GPIO_Init+0x140>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <MX_GPIO_Init+0x140>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a37      	ldr	r2, [pc, #220]	@ (800146c <MX_GPIO_Init+0x140>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b35      	ldr	r3, [pc, #212]	@ (800146c <MX_GPIO_Init+0x140>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED2_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f244 01c0 	movw	r1, #16576	@ 0x40c0
 80013a6:	4832      	ldr	r0, [pc, #200]	@ (8001470 <MX_GPIO_Init+0x144>)
 80013a8:	f001 fc4f 	bl	8002c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2120      	movs	r1, #32
 80013b0:	482f      	ldr	r0, [pc, #188]	@ (8001470 <MX_GPIO_Init+0x144>)
 80013b2:	f001 fc4a 	bl	8002c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA2_TEMP_DATA_Pin;
 80013b6:	2304      	movs	r3, #4
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PA2_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	482a      	ldr	r0, [pc, #168]	@ (8001474 <MX_GPIO_Init+0x148>)
 80013ca:	f001 faa3 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_FIX_Pin PB2_TEMP_SET_DOWN_Pin PB12_START_SW_PIN_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_FIX_Pin|PB2_TEMP_SET_DOWN_Pin|PB12_START_SW_PIN_Pin;
 80013ce:	f241 0307 	movw	r3, #4103	@ 0x1007
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d4:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <MX_GPIO_Init+0x14c>)
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4823      	ldr	r0, [pc, #140]	@ (8001470 <MX_GPIO_Init+0x144>)
 80013e4:	f001 fa96 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin PB6_LED1_Pin PB7_LED2_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED2_Pin;
 80013e8:	f244 03c0 	movw	r3, #16576	@ 0x40c0
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	481b      	ldr	r0, [pc, #108]	@ (8001470 <MX_GPIO_Init+0x144>)
 8001402:	f001 fa87 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8001406:	2320      	movs	r3, #32
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800140e:	2302      	movs	r3, #2
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	4814      	ldr	r0, [pc, #80]	@ (8001470 <MX_GPIO_Init+0x144>)
 800141e:	f001 fa79 	bl	8002914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2109      	movs	r1, #9
 8001426:	2006      	movs	r0, #6
 8001428:	f001 fa3d 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800142c:	2006      	movs	r0, #6
 800142e:	f001 fa56 	bl	80028de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2109      	movs	r1, #9
 8001436:	2007      	movs	r0, #7
 8001438:	f001 fa35 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800143c:	2007      	movs	r0, #7
 800143e:	f001 fa4e 	bl	80028de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2109      	movs	r1, #9
 8001446:	2008      	movs	r0, #8
 8001448:	f001 fa2d 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800144c:	2008      	movs	r0, #8
 800144e:	f001 fa46 	bl	80028de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2109      	movs	r1, #9
 8001456:	2028      	movs	r0, #40	@ 0x28
 8001458:	f001 fa25 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800145c:	2028      	movs	r0, #40	@ 0x28
 800145e:	f001 fa3e 	bl	80028de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40010800 	.word	0x40010800
 8001478:	10210000 	.word	0x10210000

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <Error_Handler+0x8>

08001488 <opening>:

static uint8_t m_toggle = 0;
static uint8_t m_toggle_count = 0;

void printTemperNoUpdate(int temper) ;
void opening() {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

	 SSD1306_Clear();
	 SSD1306_DrawBitmap(0, 0, ojtubelog4, 128, 64, 1);
	 SSD1306_UpdateScreen();
	 HAL_Delay(5000);*/
	printDefault();
 800148c:	f000 f842 	bl	8001514 <printDefault>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <toggleScreen>:

void toggleScreen() {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

	if (m_toggle_count > 0) {
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <toggleScreen+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d019      	beq.n	80014d4 <toggleScreen+0x40>
		if (!m_toggle) {
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <toggleScreen+0x5c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d107      	bne.n	80014b8 <toggleScreen+0x24>
			SSD1306_Clear();
 80014a8:	f000 fd77 	bl	8001f9a <SSD1306_Clear>
			SSD1306_UpdateScreen();
 80014ac:	f000 fc18 	bl	8001ce0 <SSD1306_UpdateScreen>
			m_toggle = 1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <toggleScreen+0x5c>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e00d      	b.n	80014d4 <toggleScreen+0x40>
		} else {
			printBackground();
 80014b8:	f000 f886 	bl	80015c8 <printBackground>
			printTemperNoUpdate(getFixedTemper());
 80014bc:	f7ff fcf2 	bl	8000ea4 <getFixedTemper>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f8a2 	bl	800160c <printTemperNoUpdate>
			printHeaterState(OFF_t);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 f8f1 	bl	80016b0 <printHeaterState>

			m_toggle = 0;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <toggleScreen+0x5c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
		}
	}
	if(m_toggle_count > 0 ){
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <toggleScreen+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <toggleScreen+0x54>
		m_toggle_count--;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <toggleScreen+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b01      	ldr	r3, [pc, #4]	@ (80014ec <toggleScreen+0x58>)
 80014e6:	701a      	strb	r2, [r3, #0]
	}
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000026d 	.word	0x2000026d
 80014f0:	2000026c 	.word	0x2000026c

080014f4 <startToggle>:

void startToggle() {
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
	if(m_toggle_count == 0 ){
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <startToggle+0x1c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <startToggle+0x12>
		m_toggle_count = 4;
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <startToggle+0x1c>)
 8001502:	2204      	movs	r2, #4
 8001504:	701a      	strb	r2, [r3, #0]
	}
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000026d 	.word	0x2000026d

08001514 <printDefault>:

void printDefault() {
 8001514:	b580      	push	{r7, lr}
 8001516:	b09a      	sub	sp, #104	@ 0x68
 8001518:	af00      	add	r7, sp, #0

	SSD1306_InvertDisplay(0);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 fb05 	bl	8001b2a <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8001520:	f000 fd3b 	bl	8001f9a <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8001524:	2100      	movs	r1, #0
 8001526:	2001      	movs	r0, #1
 8001528:	f000 fc7e 	bl	8001e28 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	4921      	ldr	r1, [pc, #132]	@ (80015b4 <printDefault+0xa0>)
 8001530:	4821      	ldr	r0, [pc, #132]	@ (80015b8 <printDefault+0xa4>)
 8001532:	f000 fd0d 	bl	8001f50 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8001536:	210f      	movs	r1, #15
 8001538:	2000      	movs	r0, #0
 800153a:	f000 fc75 	bl	8001e28 <SSD1306_GotoXY>
	SSD1306_Puts("-----------", &Font_11x18, 1);
 800153e:	2201      	movs	r2, #1
 8001540:	491c      	ldr	r1, [pc, #112]	@ (80015b4 <printDefault+0xa0>)
 8001542:	481e      	ldr	r0, [pc, #120]	@ (80015bc <printDefault+0xa8>)
 8001544:	f000 fd04 	bl	8001f50 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 8001548:	2126      	movs	r1, #38	@ 0x26
 800154a:	200e      	movs	r0, #14
 800154c:	f000 fc6c 	bl	8001e28 <SSD1306_GotoXY>

	char temper_str[100] = "";
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	2260      	movs	r2, #96	@ 0x60
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fda7 	bl	80050b0 <memset>
	itoa(DEFAULT_TEMPER,temper_str,10);
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	220a      	movs	r2, #10
 8001566:	4619      	mov	r1, r3
 8001568:	2019      	movs	r0, #25
 800156a:	f003 fd3d 	bl	8004fe8 <itoa>
	strcat(temper_str,".0");
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fdeb 	bl	800014c <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4413      	add	r3, r2
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <printDefault+0xac>)
 8001580:	8811      	ldrh	r1, [r2, #0]
 8001582:	7892      	ldrb	r2, [r2, #2]
 8001584:	8019      	strh	r1, [r3, #0]
 8001586:	709a      	strb	r2, [r3, #2]
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2201      	movs	r2, #1
 800158c:	4909      	ldr	r1, [pc, #36]	@ (80015b4 <printDefault+0xa0>)
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fcde 	bl	8001f50 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 8001594:	2126      	movs	r1, #38	@ 0x26
 8001596:	2051      	movs	r0, #81	@ 0x51
 8001598:	f000 fc46 	bl	8001e28 <SSD1306_GotoXY>
	SSD1306_Puts("Off", &Font_11x18, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	4905      	ldr	r1, [pc, #20]	@ (80015b4 <printDefault+0xa0>)
 80015a0:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <printDefault+0xb0>)
 80015a2:	f000 fcd5 	bl	8001f50 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80015a6:	f000 fb9b 	bl	8001ce0 <SSD1306_UpdateScreen>

}
 80015aa:	bf00      	nop
 80015ac:	3768      	adds	r7, #104	@ 0x68
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000
 80015b8:	080059e8 	.word	0x080059e8
 80015bc:	080059f4 	.word	0x080059f4
 80015c0:	08005a00 	.word	0x08005a00
 80015c4:	08005a04 	.word	0x08005a04

080015c8 <printBackground>:

void printBackground() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

	SSD1306_InvertDisplay(0);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 faac 	bl	8001b2a <SSD1306_InvertDisplay>
	SSD1306_Clear();
 80015d2:	f000 fce2 	bl	8001f9a <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2001      	movs	r0, #1
 80015da:	f000 fc25 	bl	8001e28 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	4907      	ldr	r1, [pc, #28]	@ (8001600 <printBackground+0x38>)
 80015e2:	4808      	ldr	r0, [pc, #32]	@ (8001604 <printBackground+0x3c>)
 80015e4:	f000 fcb4 	bl	8001f50 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 80015e8:	210f      	movs	r1, #15
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fc1c 	bl	8001e28 <SSD1306_GotoXY>
	SSD1306_Puts("-----------", &Font_11x18, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4903      	ldr	r1, [pc, #12]	@ (8001600 <printBackground+0x38>)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <printBackground+0x40>)
 80015f6:	f000 fcab 	bl	8001f50 <SSD1306_Puts>

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000000 	.word	0x20000000
 8001604:	080059e8 	.word	0x080059e8
 8001608:	080059f4 	.word	0x080059f4

0800160c <printTemperNoUpdate>:


void printTemperNoUpdate(int temper) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b09c      	sub	sp, #112	@ 0x70
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

	SSD1306_GotoXY(14, 38);
 8001614:	2126      	movs	r1, #38	@ 0x26
 8001616:	200e      	movs	r0, #14
 8001618:	f000 fc06 	bl	8001e28 <SSD1306_GotoXY>
	char temper_str[100] = "";
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2260      	movs	r2, #96	@ 0x60
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fd41 	bl	80050b0 <memset>
	sprintf(temper_str, "%2d.0", temper);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4907      	ldr	r1, [pc, #28]	@ (8001654 <printTemperNoUpdate+0x48>)
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fd1a 	bl	8005070 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2201      	movs	r2, #1
 8001642:	4905      	ldr	r1, [pc, #20]	@ (8001658 <printTemperNoUpdate+0x4c>)
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fc83 	bl	8001f50 <SSD1306_Puts>

}
 800164a:	bf00      	nop
 800164c:	3770      	adds	r7, #112	@ 0x70
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	08005a08 	.word	0x08005a08
 8001658:	20000000 	.word	0x20000000

0800165c <printTemper>:

void printTemper(int temper) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b09c      	sub	sp, #112	@ 0x70
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

	SSD1306_GotoXY(14, 38);
 8001664:	2126      	movs	r1, #38	@ 0x26
 8001666:	200e      	movs	r0, #14
 8001668:	f000 fbde 	bl	8001e28 <SSD1306_GotoXY>
	char temper_str[100] = "";
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2260      	movs	r2, #96	@ 0x60
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fd19 	bl	80050b0 <memset>
	sprintf(temper_str, "%2d.0", temper);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <printTemper+0x4c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fcf2 	bl	8005070 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2201      	movs	r2, #1
 8001692:	4906      	ldr	r1, [pc, #24]	@ (80016ac <printTemper+0x50>)
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fc5b 	bl	8001f50 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800169a:	f000 fb21 	bl	8001ce0 <SSD1306_UpdateScreen>

}
 800169e:	bf00      	nop
 80016a0:	3770      	adds	r7, #112	@ 0x70
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08005a08 	.word	0x08005a08
 80016ac:	20000000 	.word	0x20000000

080016b0 <printHeaterState>:

void printHeaterState(ON_OFF_t onOff) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	SSD1306_GotoXY(81, 38);
 80016ba:	2126      	movs	r1, #38	@ 0x26
 80016bc:	2051      	movs	r0, #81	@ 0x51
 80016be:	f000 fbb3 	bl	8001e28 <SSD1306_GotoXY>
	if(onOff == ON_t){
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <printHeaterState+0x24>
		SSD1306_Puts("On ", &Font_11x18, 1);
 80016c8:	2201      	movs	r2, #1
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <printHeaterState+0x3c>)
 80016cc:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <printHeaterState+0x40>)
 80016ce:	f000 fc3f 	bl	8001f50 <SSD1306_Puts>
 80016d2:	e004      	b.n	80016de <printHeaterState+0x2e>
	}else{
		SSD1306_Puts("Off", &Font_11x18, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	4905      	ldr	r1, [pc, #20]	@ (80016ec <printHeaterState+0x3c>)
 80016d8:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <printHeaterState+0x44>)
 80016da:	f000 fc39 	bl	8001f50 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 80016de:	f000 faff 	bl	8001ce0 <SSD1306_UpdateScreen>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000
 80016f0:	08005a10 	.word	0x08005a10
 80016f4:	08005a04 	.word	0x08005a04

080016f8 <isBusyLine>:
 */
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"
static uint8_t m_busy_line =0;
uint8_t isBusyLine(){
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

	return m_busy_line;
 80016fc:	4b02      	ldr	r3, [pc, #8]	@ (8001708 <isBusyLine+0x10>)
 80016fe:	781b      	ldrb	r3, [r3, #0]

}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	2000026e 	.word	0x2000026e

0800170c <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <ONEWIRE_DELAY+0x2c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800171e:	bf00      	nop
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <ONEWIRE_DELAY+0x2c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	429a      	cmp	r2, r3
 800172a:	d9f9      	bls.n	8001720 <ONEWIRE_DELAY+0x14>
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	2000018c 	.word	0x2000018c

0800173c <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0412      	lsls	r2, r2, #16
 8001750:	611a      	str	r2, [r3, #16]
}	
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	889a      	ldrh	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	611a      	str	r2, [r3, #16]
}	
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f107 0208 	add.w	r2, r7, #8
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f8b9 	bl	8002914 <HAL_GPIO_Init>
}	
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80017b2:	2311      	movs	r3, #17
 80017b4:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	889b      	ldrh	r3, [r3, #4]
 80017c2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 f8a0 	bl	8002914 <HAL_GPIO_Init>

}
 80017d4:	bf00      	nop
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <OneWire_Init+0x60>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 80017f0:	4813      	ldr	r0, [pc, #76]	@ (8001840 <OneWire_Init+0x64>)
 80017f2:	f002 ff0f 	bl	8004614 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	88fa      	ldrh	r2, [r7, #6]
 8001800:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7ff ffd1 	bl	80017aa <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff ffa7 	bl	800175c <ONEWIRE_HIGH>
	OneWireDelay(1000);
 800180e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001812:	f000 ff4d 	bl	80026b0 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff ff90 	bl	800173c <ONEWIRE_LOW>
	OneWireDelay(1000);
 800181c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001820:	f000 ff46 	bl	80026b0 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff ff99 	bl	800175c <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800182a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800182e:	f000 ff3f 	bl	80026b0 <HAL_Delay>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000026e 	.word	0x2000026e
 8001840:	2000018c 	.word	0x2000018c

08001844 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff75 	bl	800173c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffa9 	bl	80017aa <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8001858:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800185c:	f7ff ff56 	bl	800170c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001860:	2014      	movs	r0, #20
 8001862:	f7ff ff53 	bl	800170c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line = 1;
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <OneWire_Reset+0x60>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff83 	bl	8001778 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001872:	2046      	movs	r0, #70	@ 0x46
 8001874:	f7ff ff4a 	bl	800170c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	889b      	ldrh	r3, [r3, #4]
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f001 f9ca 	bl	8002c1c <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <OneWire_Reset+0x60>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8001892:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8001896:	f7ff ff39 	bl	800170c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000026e 	.word	0x2000026e

080018a8 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]


	if (bit) 
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d024      	beq.n	8001904 <OneWire_WriteBit+0x5c>
	{
		/* Set line low */
		m_busy_line = 1;
 80018ba:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <OneWire_WriteBit+0xa0>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff3b 	bl	800173c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff6f 	bl	80017aa <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f7ff ff1d 	bl	800170c <ONEWIRE_DELAY>
		m_busy_line = 0;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <OneWire_WriteBit+0xa0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]

		/* Bit high */
		m_busy_line = 1;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <OneWire_WriteBit+0xa0>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff4a 	bl	8001778 <ONEWIRE_INPUT>
		m_busy_line = 0;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <OneWire_WriteBit+0xa0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
		/* Wait for 55 us and release the line */

		ONEWIRE_DELAY(55);
 80018ea:	2037      	movs	r0, #55	@ 0x37
 80018ec:	f7ff ff0e 	bl	800170c <ONEWIRE_DELAY>

		m_busy_line = 1;
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <OneWire_WriteBit+0xa0>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff3e 	bl	8001778 <ONEWIRE_INPUT>
		m_busy_line = 0;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <OneWire_WriteBit+0xa0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}


}
 8001902:	e01d      	b.n	8001940 <OneWire_WriteBit+0x98>
		m_busy_line = 1;
 8001904:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <OneWire_WriteBit+0xa0>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff16 	bl	800173c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff4a 	bl	80017aa <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <OneWire_WriteBit+0xa0>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 800191c:	2041      	movs	r0, #65	@ 0x41
 800191e:	f7ff fef5 	bl	800170c <ONEWIRE_DELAY>
		m_busy_line = 1;
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <OneWire_WriteBit+0xa0>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff25 	bl	8001778 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 800192e:	2005      	movs	r0, #5
 8001930:	f7ff feec 	bl	800170c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff1f 	bl	8001778 <ONEWIRE_INPUT>
		m_busy_line = 0;
 800193a:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <OneWire_WriteBit+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000026e 	.word	0x2000026e

0800194c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */

	m_busy_line = 1;
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <OneWire_ReadBit+0x78>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff feec 	bl	800173c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff20 	bl	80017aa <ONEWIRE_OUTPUT>

	ONEWIRE_DELAY(2);
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fece 	bl	800170c <ONEWIRE_DELAY>
	m_busy_line = 0;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <OneWire_ReadBit+0x78>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]

	/* Release line */
	m_busy_line = 1;
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <OneWire_ReadBit+0x78>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fefb 	bl	8001778 <ONEWIRE_INPUT>

	ONEWIRE_DELAY(10);
 8001982:	200a      	movs	r0, #10
 8001984:	f7ff fec2 	bl	800170c <ONEWIRE_DELAY>
	m_busy_line = 0;
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <OneWire_ReadBit+0x78>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	

	/* Read line value */
	m_busy_line = 1;
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <OneWire_ReadBit+0x78>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	889b      	ldrh	r3, [r3, #4]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f001 f93c 	bl	8002c1c <HAL_GPIO_ReadPin>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <OneWire_ReadBit+0x78>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 80019b4:	2032      	movs	r0, #50	@ 0x32
 80019b6:	f7ff fea9 	bl	800170c <ONEWIRE_DELAY>
	

	/* Return bit value */
	return bit;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000026e 	.word	0x2000026e

080019c8 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80019d4:	2308      	movs	r3, #8
 80019d6:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80019d8:	e00a      	b.n	80019f0 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff5f 	bl	80018a8 <OneWire_WriteBit>
		byte >>= 1;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	73fa      	strb	r2, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ef      	bne.n	80019da <OneWire_WriteByte+0x12>
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	2300      	movs	r3, #0
 8001a12:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001a14:	e00d      	b.n	8001a32 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff95 	bl	800194c <OneWire_ReadBit>
 8001a22:	4603      	mov	r3, r0
 8001a24:	01db      	lsls	r3, r3, #7
 8001a26:	b25a      	sxtb	r2, r3
 8001a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	1e5a      	subs	r2, r3, #1
 8001a36:	73fa      	strb	r2, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ec      	bne.n	8001a16 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001a50:	2155      	movs	r1, #85	@ 0x55
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffb8 	bl	80019c8 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e00a      	b.n	8001a74 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffad 	bl	80019c8 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	d9f1      	bls.n	8001a5e <OneWire_SelectWithPointer+0x18>
	}	
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e00a      	b.n	8001aaa <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	7a52      	ldrb	r2, [r2, #9]
 8001aa2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b07      	cmp	r3, #7
 8001aae:	d9f1      	bls.n	8001a94 <OneWire_GetFullROM+0x10>
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8001acc:	e022      	b.n	8001b14 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001ad8:	2308      	movs	r3, #8
 8001ada:	737b      	strb	r3, [r7, #13]
 8001adc:	e017      	b.n	8001b0e <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
 8001ae2:	4053      	eors	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001afe:	43db      	mvns	r3, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	737b      	strb	r3, [r7, #13]
 8001b0e:	7b7b      	ldrb	r3, [r7, #13]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e4      	bne.n	8001ade <OneWire_CRC8+0x22>
	while (len--) {
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	70fa      	strb	r2, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1d7      	bne.n	8001ace <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <SSD1306_InvertDisplay+0x1a>
 8001b38:	22a7      	movs	r2, #167	@ 0xa7
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2078      	movs	r0, #120	@ 0x78
 8001b3e:	f000 faaf 	bl	80020a0 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001b42:	e004      	b.n	8001b4e <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001b44:	22a6      	movs	r2, #166	@ 0xa6
 8001b46:	2100      	movs	r1, #0
 8001b48:	2078      	movs	r0, #120	@ 0x78
 8001b4a:	f000 faa9 	bl	80020a0 <ssd1306_I2C_Write>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b5e:	f000 fa25 	bl	8001fac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b62:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001b66:	2201      	movs	r2, #1
 8001b68:	2178      	movs	r1, #120	@ 0x78
 8001b6a:	485b      	ldr	r0, [pc, #364]	@ (8001cd8 <SSD1306_Init+0x180>)
 8001b6c:	f001 faea 	bl	8003144 <HAL_I2C_IsDeviceReady>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e0a9      	b.n	8001cce <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001b7a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001b7e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b80:	e002      	b.n	8001b88 <SSD1306_Init+0x30>
		p--;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001b8e:	22ae      	movs	r2, #174	@ 0xae
 8001b90:	2100      	movs	r1, #0
 8001b92:	2078      	movs	r0, #120	@ 0x78
 8001b94:	f000 fa84 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001b98:	2220      	movs	r2, #32
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2078      	movs	r0, #120	@ 0x78
 8001b9e:	f000 fa7f 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2078      	movs	r0, #120	@ 0x78
 8001ba8:	f000 fa7a 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bac:	22b0      	movs	r2, #176	@ 0xb0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2078      	movs	r0, #120	@ 0x78
 8001bb2:	f000 fa75 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001bb6:	22c8      	movs	r2, #200	@ 0xc8
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2078      	movs	r0, #120	@ 0x78
 8001bbc:	f000 fa70 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2078      	movs	r0, #120	@ 0x78
 8001bc6:	f000 fa6b 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bca:	2210      	movs	r2, #16
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2078      	movs	r0, #120	@ 0x78
 8001bd0:	f000 fa66 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001bd4:	2240      	movs	r2, #64	@ 0x40
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2078      	movs	r0, #120	@ 0x78
 8001bda:	f000 fa61 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001bde:	2281      	movs	r2, #129	@ 0x81
 8001be0:	2100      	movs	r1, #0
 8001be2:	2078      	movs	r0, #120	@ 0x78
 8001be4:	f000 fa5c 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001be8:	22ff      	movs	r2, #255	@ 0xff
 8001bea:	2100      	movs	r1, #0
 8001bec:	2078      	movs	r0, #120	@ 0x78
 8001bee:	f000 fa57 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001bf2:	22a1      	movs	r2, #161	@ 0xa1
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2078      	movs	r0, #120	@ 0x78
 8001bf8:	f000 fa52 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001bfc:	22a6      	movs	r2, #166	@ 0xa6
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2078      	movs	r0, #120	@ 0x78
 8001c02:	f000 fa4d 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c06:	22a8      	movs	r2, #168	@ 0xa8
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2078      	movs	r0, #120	@ 0x78
 8001c0c:	f000 fa48 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c10:	223f      	movs	r2, #63	@ 0x3f
 8001c12:	2100      	movs	r1, #0
 8001c14:	2078      	movs	r0, #120	@ 0x78
 8001c16:	f000 fa43 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c1a:	22a4      	movs	r2, #164	@ 0xa4
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2078      	movs	r0, #120	@ 0x78
 8001c20:	f000 fa3e 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c24:	22d3      	movs	r2, #211	@ 0xd3
 8001c26:	2100      	movs	r1, #0
 8001c28:	2078      	movs	r0, #120	@ 0x78
 8001c2a:	f000 fa39 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2078      	movs	r0, #120	@ 0x78
 8001c34:	f000 fa34 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c38:	22d5      	movs	r2, #213	@ 0xd5
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2078      	movs	r0, #120	@ 0x78
 8001c3e:	f000 fa2f 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c42:	22f0      	movs	r2, #240	@ 0xf0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2078      	movs	r0, #120	@ 0x78
 8001c48:	f000 fa2a 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c4c:	22d9      	movs	r2, #217	@ 0xd9
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2078      	movs	r0, #120	@ 0x78
 8001c52:	f000 fa25 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c56:	2222      	movs	r2, #34	@ 0x22
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2078      	movs	r0, #120	@ 0x78
 8001c5c:	f000 fa20 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c60:	22da      	movs	r2, #218	@ 0xda
 8001c62:	2100      	movs	r1, #0
 8001c64:	2078      	movs	r0, #120	@ 0x78
 8001c66:	f000 fa1b 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c6a:	2212      	movs	r2, #18
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2078      	movs	r0, #120	@ 0x78
 8001c70:	f000 fa16 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c74:	22db      	movs	r2, #219	@ 0xdb
 8001c76:	2100      	movs	r1, #0
 8001c78:	2078      	movs	r0, #120	@ 0x78
 8001c7a:	f000 fa11 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001c7e:	2220      	movs	r2, #32
 8001c80:	2100      	movs	r1, #0
 8001c82:	2078      	movs	r0, #120	@ 0x78
 8001c84:	f000 fa0c 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001c88:	228d      	movs	r2, #141	@ 0x8d
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2078      	movs	r0, #120	@ 0x78
 8001c8e:	f000 fa07 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c92:	2214      	movs	r2, #20
 8001c94:	2100      	movs	r1, #0
 8001c96:	2078      	movs	r0, #120	@ 0x78
 8001c98:	f000 fa02 	bl	80020a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001c9c:	22af      	movs	r2, #175	@ 0xaf
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2078      	movs	r0, #120	@ 0x78
 8001ca2:	f000 f9fd 	bl	80020a0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001ca6:	222e      	movs	r2, #46	@ 0x2e
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2078      	movs	r0, #120	@ 0x78
 8001cac:	f000 f9f8 	bl	80020a0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 f843 	bl	8001d3c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001cb6:	f000 f813 	bl	8001ce0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <SSD1306_Init+0x184>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <SSD1306_Init+0x184>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <SSD1306_Init+0x184>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000e0 	.word	0x200000e0
 8001cdc:	20000670 	.word	0x20000670

08001ce0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	e01d      	b.n	8001d28 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	3b50      	subs	r3, #80	@ 0x50
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2078      	movs	r0, #120	@ 0x78
 8001cf8:	f000 f9d2 	bl	80020a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2078      	movs	r0, #120	@ 0x78
 8001d02:	f000 f9cd 	bl	80020a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d06:	2210      	movs	r2, #16
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2078      	movs	r0, #120	@ 0x78
 8001d0c:	f000 f9c8 	bl	80020a0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	01db      	lsls	r3, r3, #7
 8001d14:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <SSD1306_UpdateScreen+0x58>)
 8001d16:	441a      	add	r2, r3
 8001d18:	2380      	movs	r3, #128	@ 0x80
 8001d1a:	2140      	movs	r1, #64	@ 0x40
 8001d1c:	2078      	movs	r0, #120	@ 0x78
 8001d1e:	f000 f959 	bl	8001fd4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	3301      	adds	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d9de      	bls.n	8001cec <SSD1306_UpdateScreen+0xc>
	}
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000270 	.word	0x20000270

08001d3c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <SSD1306_Fill+0x14>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <SSD1306_Fill+0x16>
 8001d50:	23ff      	movs	r3, #255	@ 0xff
 8001d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d56:	4619      	mov	r1, r3
 8001d58:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <SSD1306_Fill+0x2c>)
 8001d5a:	f003 f9a9 	bl	80050b0 <memset>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000270 	.word	0x20000270

08001d6c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
 8001d76:	460b      	mov	r3, r1
 8001d78:	80bb      	strh	r3, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	70fb      	strb	r3, [r7, #3]
	if (
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d82:	d848      	bhi.n	8001e16 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001d84:	88bb      	ldrh	r3, [r7, #4]
 8001d86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d88:	d845      	bhi.n	8001e16 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001d8a:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <SSD1306_DrawPixel+0xb4>)
 8001d8c:	791b      	ldrb	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d11a      	bne.n	8001ddc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	88bb      	ldrh	r3, [r7, #4]
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	b298      	uxth	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	01db      	lsls	r3, r3, #7
 8001db2:	4413      	add	r3, r2
 8001db4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e24 <SSD1306_DrawPixel+0xb8>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	b25a      	sxtb	r2, r3
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b259      	sxtb	r1, r3
 8001dcc:	88fa      	ldrh	r2, [r7, #6]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	01db      	lsls	r3, r3, #7
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2c9      	uxtb	r1, r1
 8001dd6:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <SSD1306_DrawPixel+0xb8>)
 8001dd8:	54d1      	strb	r1, [r2, r3]
 8001dda:	e01d      	b.n	8001e18 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ddc:	88fa      	ldrh	r2, [r7, #6]
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	b298      	uxth	r0, r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	4413      	add	r3, r2
 8001dea:	4a0e      	ldr	r2, [pc, #56]	@ (8001e24 <SSD1306_DrawPixel+0xb8>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4013      	ands	r3, r2
 8001e04:	b259      	sxtb	r1, r3
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b2c9      	uxtb	r1, r1
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <SSD1306_DrawPixel+0xb8>)
 8001e12:	54d1      	strb	r1, [r2, r3]
 8001e14:	e000      	b.n	8001e18 <SSD1306_DrawPixel+0xac>
		return;
 8001e16:	bf00      	nop
	}
}
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000670 	.word	0x20000670
 8001e24:	20000270 	.word	0x20000270

08001e28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460a      	mov	r2, r1
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	4613      	mov	r3, r2
 8001e36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e38:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <SSD1306_GotoXY+0x28>)
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <SSD1306_GotoXY+0x28>)
 8001e40:	88bb      	ldrh	r3, [r7, #4]
 8001e42:	8053      	strh	r3, [r2, #2]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000670 	.word	0x20000670

08001e54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e64:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
	if (
 8001e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e72:	dc07      	bgt.n	8001e84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001e74:	4b35      	ldr	r3, [pc, #212]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001e76:	885b      	ldrh	r3, [r3, #2]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e82:	dd01      	ble.n	8001e88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e05d      	b.n	8001f44 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e04b      	b.n	8001f26 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	3b20      	subs	r3, #32
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	7849      	ldrb	r1, [r1, #1]
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	440b      	add	r3, r1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e030      	b.n	8001f14 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ec2:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b298      	uxth	r0, r3
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001ed0:	885a      	ldrh	r2, [r3, #2]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	79ba      	ldrb	r2, [r7, #6]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff ff45 	bl	8001d6c <SSD1306_DrawPixel>
 8001ee2:	e014      	b.n	8001f0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001ef2:	885a      	ldrh	r2, [r3, #2]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	b299      	uxth	r1, r3
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf0c      	ite	eq
 8001f02:	2301      	moveq	r3, #1
 8001f04:	2300      	movne	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff ff2f 	bl	8001d6c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	3301      	adds	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d3c8      	bcc.n	8001eb2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d3ad      	bcc.n	8001e8e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <SSD1306_Putc+0xf8>)
 8001f40:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001f42:	79fb      	ldrb	r3, [r7, #7]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000670 	.word	0x20000670

08001f50 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001f5e:	e012      	b.n	8001f86 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff73 	bl	8001e54 <SSD1306_Putc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d002      	beq.n	8001f80 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	e008      	b.n	8001f92 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e8      	bne.n	8001f60 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	781b      	ldrb	r3, [r3, #0]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff fecc 	bl	8001d3c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fa4:	f7ff fe9c 	bl	8001ce0 <SSD1306_UpdateScreen>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <ssd1306_I2C_Init+0x24>)
 8001fb4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fb6:	e002      	b.n	8001fbe <ssd1306_I2C_Init+0x12>
		p--;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	0003d090 	.word	0x0003d090

08001fd4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b0c7      	sub	sp, #284	@ 0x11c
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001fe2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001fe6:	600a      	str	r2, [r1, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ffa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001ffe:	4602      	mov	r2, r0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002006:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800200a:	460a      	mov	r2, r1
 800200c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800200e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002016:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800201a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002028:	e015      	b.n	8002056 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800202a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800202e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002032:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	441a      	add	r2, r3
 800203a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800203e:	3301      	adds	r3, #1
 8002040:	7811      	ldrb	r1, [r2, #0]
 8002042:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002046:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800204a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800204c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002050:	3301      	adds	r3, #1
 8002052:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002056:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800205a:	b29b      	uxth	r3, r3
 800205c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002060:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d8df      	bhi.n	800202a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 800206a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800206e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b299      	uxth	r1, r3
 8002076:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800207a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	f107 020c 	add.w	r2, r7, #12
 8002088:	200a      	movs	r0, #10
 800208a:	9000      	str	r0, [sp, #0]
 800208c:	4803      	ldr	r0, [pc, #12]	@ (800209c <ssd1306_I2C_WriteMulti+0xc8>)
 800208e:	f000 ff5b 	bl	8002f48 <HAL_I2C_Master_Transmit>
}
 8002092:	bf00      	nop
 8002094:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002098:	46bd      	mov	sp, r7
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	200000e0 	.word	0x200000e0

080020a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	460b      	mov	r3, r1
 80020ac:	71bb      	strb	r3, [r7, #6]
 80020ae:	4613      	mov	r3, r2
 80020b0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	b299      	uxth	r1, r3
 80020be:	f107 020c 	add.w	r2, r7, #12
 80020c2:	230a      	movs	r3, #10
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2302      	movs	r3, #2
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <ssd1306_I2C_Write+0x38>)
 80020ca:	f000 ff3d 	bl	8002f48 <HAL_I2C_Master_Transmit>
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200000e0 	.word	0x200000e0

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_MspInit+0x5c>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <HAL_MspInit+0x5c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_MspInit+0x5c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002138 <HAL_MspInit+0x5c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <HAL_MspInit+0x5c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_MspInit+0x60>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_MspInit+0x60>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000

08002140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <HAL_I2C_MspInit+0x74>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d124      	bne.n	80021aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_I2C_MspInit+0x78>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_I2C_MspInit+0x78>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_I2C_MspInit+0x78>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002178:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800217c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217e:	2312      	movs	r3, #18
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	4619      	mov	r1, r3
 800218c:	480b      	ldr	r0, [pc, #44]	@ (80021bc <HAL_I2C_MspInit+0x7c>)
 800218e:	f000 fbc1 	bl	8002914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_I2C_MspInit+0x78>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <HAL_I2C_MspInit+0x78>)
 8002198:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_I2C_MspInit+0x78>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80021aa:	bf00      	nop
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40005800 	.word	0x40005800
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010c00 	.word	0x40010c00

080021c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0310 	add.w	r3, r7, #16
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <HAL_SPI_MspInit+0x74>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d124      	bne.n	800222a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021e0:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_SPI_MspInit+0x78>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a14      	ldr	r2, [pc, #80]	@ (8002238 <HAL_SPI_MspInit+0x78>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ea:	61d3      	str	r3, [r2, #28]
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_SPI_MspInit+0x78>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <HAL_SPI_MspInit+0x78>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <HAL_SPI_MspInit+0x78>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <HAL_SPI_MspInit+0x78>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_DIO_Pin;
 8002210:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <HAL_SPI_MspInit+0x7c>)
 8002226:	f000 fb75 	bl	8002914 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800222a:	bf00      	nop
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40003800 	.word	0x40003800
 8002238:	40021000 	.word	0x40021000
 800223c:	40010c00 	.word	0x40010c00

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002250:	d114      	bne.n	800227c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_TIM_Base_MspInit+0x78>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_TIM_Base_MspInit+0x78>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_TIM_Base_MspInit+0x78>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	201c      	movs	r0, #28
 8002270:	f000 fb19 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002274:	201c      	movs	r0, #28
 8002276:	f000 fb32 	bl	80028de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800227a:	e018      	b.n	80022ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0e      	ldr	r2, [pc, #56]	@ (80022bc <HAL_TIM_Base_MspInit+0x7c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d113      	bne.n	80022ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002286:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_TIM_Base_MspInit+0x78>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a0b      	ldr	r2, [pc, #44]	@ (80022b8 <HAL_TIM_Base_MspInit+0x78>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_TIM_Base_MspInit+0x78>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	210a      	movs	r1, #10
 80022a2:	201d      	movs	r0, #29
 80022a4:	f000 faff 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022a8:	201d      	movs	r0, #29
 80022aa:	f000 fb18 	bl	80028de <HAL_NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40000400 	.word	0x40000400

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1c      	ldr	r2, [pc, #112]	@ (800234c <HAL_UART_MspInit+0x8c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d131      	bne.n	8002344 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <HAL_UART_MspInit+0x90>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002350 <HAL_UART_MspInit+0x90>)
 80022e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_UART_MspInit+0x90>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_UART_MspInit+0x90>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <HAL_UART_MspInit+0x90>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_UART_MspInit+0x90>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4619      	mov	r1, r3
 8002324:	480b      	ldr	r0, [pc, #44]	@ (8002354 <HAL_UART_MspInit+0x94>)
 8002326:	f000 faf5 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800232a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800232e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4619      	mov	r1, r3
 800233e:	4805      	ldr	r0, [pc, #20]	@ (8002354 <HAL_UART_MspInit+0x94>)
 8002340:	f000 fae8 	bl	8002914 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40013800 	.word	0x40013800
 8002350:	40021000 	.word	0x40021000
 8002354:	40010800 	.word	0x40010800

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <NMI_Handler+0x4>

08002360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <MemManage_Handler+0x4>

08002370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <UsageFault_Handler+0x4>

08002380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a8:	f000 f966 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f000 fc61 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 80023ba:	f000 f96f 	bl	800269c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <EXTI0_IRQHandler+0x30>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80023c8:	d902      	bls.n	80023d0 <EXTI0_IRQHandler+0x20>
		g_f_sw_up = 1;
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <EXTI0_IRQHandler+0x34>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
	}

	m_button_before_time = HAL_GetTick();
 80023d0:	f000 f964 	bl	800269c <HAL_GetTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a02      	ldr	r2, [pc, #8]	@ (80023e0 <EXTI0_IRQHandler+0x30>)
 80023d8:	6013      	str	r3, [r2, #0]

	/* USER CODE END EXTI0_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000678 	.word	0x20000678
 80023e4:	200000da 	.word	0x200000da

080023e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023ec:	2002      	movs	r0, #2
 80023ee:	f000 fc45 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 80023f2:	f000 f953 	bl	800269c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <EXTI1_IRQHandler+0x30>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8002400:	d902      	bls.n	8002408 <EXTI1_IRQHandler+0x20>
		g_f_sw_fix = 1;
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <EXTI1_IRQHandler+0x34>)
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
	}
	m_button_before_time = HAL_GetTick();
 8002408:	f000 f948 	bl	800269c <HAL_GetTick>
 800240c:	4603      	mov	r3, r0
 800240e:	4a02      	ldr	r2, [pc, #8]	@ (8002418 <EXTI1_IRQHandler+0x30>)
 8002410:	6013      	str	r3, [r2, #0]
	/* USER CODE END EXTI1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000678 	.word	0x20000678
 800241c:	200000dc 	.word	0x200000dc

08002420 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI2_IRQn 0 */

	/* USER CODE END EXTI2_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002424:	2004      	movs	r0, #4
 8002426:	f000 fc29 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI2_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 800242a:	f000 f937 	bl	800269c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <EXTI2_IRQHandler+0x30>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2bc8      	cmp	r3, #200	@ 0xc8
 8002438:	d902      	bls.n	8002440 <EXTI2_IRQHandler+0x20>
		g_f_sw_down = 1;
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <EXTI2_IRQHandler+0x34>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
	}
	m_button_before_time = HAL_GetTick();
 8002440:	f000 f92c 	bl	800269c <HAL_GetTick>
 8002444:	4603      	mov	r3, r0
 8002446:	4a02      	ldr	r2, [pc, #8]	@ (8002450 <EXTI2_IRQHandler+0x30>)
 8002448:	6013      	str	r3, [r2, #0]
	/* USER CODE END EXTI2_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000678 	.word	0x20000678
 8002454:	200000db 	.word	0x200000db

08002458 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <TIM2_IRQHandler+0x10>)
 800245e:	f002 f975 	bl	800474c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000018c 	.word	0x2000018c

0800246c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	if (m_power_sw_timer > POWER_SW_CHECK_TIME) {
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <TIM3_IRQHandler+0x90>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b64      	cmp	r3, #100	@ 0x64
 8002476:	d90e      	bls.n	8002496 <TIM3_IRQHandler+0x2a>
		if (getSwState() == ON_t) {
 8002478:	f7fe f890 	bl	800059c <getSwState>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d103      	bne.n	800248a <TIM3_IRQHandler+0x1e>
			led1OnOff(ON_t);
 8002482:	2001      	movs	r0, #1
 8002484:	f7fe fd48 	bl	8000f18 <led1OnOff>
 8002488:	e002      	b.n	8002490 <TIM3_IRQHandler+0x24>

		} else {
			led1OnOff(OFF_t);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fd44 	bl	8000f18 <led1OnOff>
		}
		m_power_sw_timer = 0;
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <TIM3_IRQHandler+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
	}

	if (m_toggle_timer > TOGGLE_TIME) {
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <TIM3_IRQHandler+0x94>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800249e:	4293      	cmp	r3, r2
 80024a0:	d904      	bls.n	80024ac <TIM3_IRQHandler+0x40>
		toggleScreen();
 80024a2:	f7fe fff7 	bl	8001494 <toggleScreen>
		m_toggle_timer = 0;
 80024a6:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <TIM3_IRQHandler+0x94>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
	}

	m_toggle_timer++;
 80024ac:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <TIM3_IRQHandler+0x94>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a13      	ldr	r2, [pc, #76]	@ (8002500 <TIM3_IRQHandler+0x94>)
 80024b4:	6013      	str	r3, [r2, #0]
	m_power_sw_timer++;
 80024b6:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <TIM3_IRQHandler+0x90>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <TIM3_IRQHandler+0x90>)
 80024be:	6013      	str	r3, [r2, #0]

	if (isTemperSensorInit() && !isBusy()) {
 80024c0:	f7fe f87e 	bl	80005c0 <isTemperSensorInit>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d013      	beq.n	80024f2 <TIM3_IRQHandler+0x86>
 80024ca:	f7fe f883 	bl	80005d4 <isBusy>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10e      	bne.n	80024f2 <TIM3_IRQHandler+0x86>
		digit4_temper((int) (getCurrentTemper() * 10));
 80024d4:	f7fe fb2c 	bl	8000b30 <getCurrentTemper>
 80024d8:	4603      	mov	r3, r0
 80024da:	490a      	ldr	r1, [pc, #40]	@ (8002504 <TIM3_IRQHandler+0x98>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd fe3d 	bl	800015c <__aeabi_fmul>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fffb 	bl	80004e0 <__aeabi_f2iz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fbc5 	bl	8000c7c <digit4_temper>
	}

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <TIM3_IRQHandler+0x9c>)
 80024f4:	f002 f92a 	bl	800474c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000067c 	.word	0x2000067c
 8002500:	20000680 	.word	0x20000680
 8002504:	41200000 	.word	0x41200000
 8002508:	200001d4 	.word	0x200001d4

0800250c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB12_START_SW_PIN_Pin);
 8002510:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002514:	f000 fbb2 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  g_f_sw_on = 1;
 8002518:	4b02      	ldr	r3, [pc, #8]	@ (8002524 <EXTI15_10_IRQHandler+0x18>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200000dd 	.word	0x200000dd

08002528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <_sbrk+0x5c>)
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <_sbrk+0x60>)
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800253c:	4b13      	ldr	r3, [pc, #76]	@ (800258c <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <_sbrk+0x64>)
 8002546:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <_sbrk+0x68>)
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d207      	bcs.n	8002568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002558:	f002 fdb2 	bl	80050c0 <__errno>
 800255c:	4603      	mov	r3, r0
 800255e:	220c      	movs	r2, #12
 8002560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	e009      	b.n	800257c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002568:	4b08      	ldr	r3, [pc, #32]	@ (800258c <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800256e:	4b07      	ldr	r3, [pc, #28]	@ (800258c <_sbrk+0x64>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	4a05      	ldr	r2, [pc, #20]	@ (800258c <_sbrk+0x64>)
 8002578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20005000 	.word	0x20005000
 8002588:	00000400 	.word	0x00000400
 800258c:	20000684 	.word	0x20000684
 8002590:	200007d8 	.word	0x200007d8

08002594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a0:	f7ff fff8 	bl	8002594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480b      	ldr	r0, [pc, #44]	@ (80025d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025a6:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025a8:	4a0c      	ldr	r2, [pc, #48]	@ (80025dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025bc:	4c09      	ldr	r4, [pc, #36]	@ (80025e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ca:	f002 fd7f 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ce:	f7fe fcdb 	bl	8000f88 <main>
  bx lr
 80025d2:	4770      	bx	lr
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80025dc:	08006804 	.word	0x08006804
  ldr r2, =_sbss
 80025e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80025e4:	200007d4 	.word	0x200007d4

080025e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC1_2_IRQHandler>
	...

080025ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_Init+0x28>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <HAL_Init+0x28>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 f947 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	200f      	movs	r0, #15
 8002604:	f000 f808 	bl	8002618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002608:	f7ff fd68 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_InitTick+0x54>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_InitTick+0x58>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f95f 	bl	80028fa <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00e      	b.n	8002664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d80a      	bhi.n	8002662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f000 f927 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002658:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <HAL_InitTick+0x5c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000010 	.word	0x20000010
 8002670:	20000018 	.word	0x20000018
 8002674:	20000014 	.word	0x20000014

08002678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_IncTick+0x1c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_IncTick+0x20>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a03      	ldr	r2, [pc, #12]	@ (8002698 <HAL_IncTick+0x20>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	20000018 	.word	0x20000018
 8002698:	20000688 	.word	0x20000688

0800269c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b02      	ldr	r3, [pc, #8]	@ (80026ac <HAL_GetTick+0x10>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000688 	.word	0x20000688

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fff0 	bl	800269c <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffe0 	bl	800269c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000018 	.word	0x20000018

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <__NVIC_EnableIRQ+0x34>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff90 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff2d 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff42 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff90 	bl	80027e8 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5f 	bl	8002794 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff35 	bl	800275c <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa2 	bl	800284c <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b08b      	sub	sp, #44	@ 0x2c
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	e169      	b.n	8002bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002928:	2201      	movs	r2, #1
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8158 	bne.w	8002bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a9a      	ldr	r2, [pc, #616]	@ (8002bb4 <HAL_GPIO_Init+0x2a0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d05e      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002950:	4a98      	ldr	r2, [pc, #608]	@ (8002bb4 <HAL_GPIO_Init+0x2a0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d875      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002956:	4a98      	ldr	r2, [pc, #608]	@ (8002bb8 <HAL_GPIO_Init+0x2a4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d058      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 800295c:	4a96      	ldr	r2, [pc, #600]	@ (8002bb8 <HAL_GPIO_Init+0x2a4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d86f      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002962:	4a96      	ldr	r2, [pc, #600]	@ (8002bbc <HAL_GPIO_Init+0x2a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d052      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002968:	4a94      	ldr	r2, [pc, #592]	@ (8002bbc <HAL_GPIO_Init+0x2a8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d869      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800296e:	4a94      	ldr	r2, [pc, #592]	@ (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04c      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002974:	4a92      	ldr	r2, [pc, #584]	@ (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d863      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800297a:	4a92      	ldr	r2, [pc, #584]	@ (8002bc4 <HAL_GPIO_Init+0x2b0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d046      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002980:	4a90      	ldr	r2, [pc, #576]	@ (8002bc4 <HAL_GPIO_Init+0x2b0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d85d      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d82a      	bhi.n	80029e0 <HAL_GPIO_Init+0xcc>
 800298a:	2b12      	cmp	r3, #18
 800298c:	d859      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800298e:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <HAL_GPIO_Init+0x80>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	08002a0f 	.word	0x08002a0f
 8002998:	080029e9 	.word	0x080029e9
 800299c:	080029fb 	.word	0x080029fb
 80029a0:	08002a3d 	.word	0x08002a3d
 80029a4:	08002a43 	.word	0x08002a43
 80029a8:	08002a43 	.word	0x08002a43
 80029ac:	08002a43 	.word	0x08002a43
 80029b0:	08002a43 	.word	0x08002a43
 80029b4:	08002a43 	.word	0x08002a43
 80029b8:	08002a43 	.word	0x08002a43
 80029bc:	08002a43 	.word	0x08002a43
 80029c0:	08002a43 	.word	0x08002a43
 80029c4:	08002a43 	.word	0x08002a43
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a43 	.word	0x08002a43
 80029d0:	08002a43 	.word	0x08002a43
 80029d4:	08002a43 	.word	0x08002a43
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	4a79      	ldr	r2, [pc, #484]	@ (8002bc8 <HAL_GPIO_Init+0x2b4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e6:	e02c      	b.n	8002a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e029      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	3304      	adds	r3, #4
 80029f6:	623b      	str	r3, [r7, #32]
          break;
 80029f8:	e024      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	3308      	adds	r3, #8
 8002a00:	623b      	str	r3, [r7, #32]
          break;
 8002a02:	e01f      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	623b      	str	r3, [r7, #32]
          break;
 8002a0c:	e01a      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a16:	2304      	movs	r3, #4
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e013      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a24:	2308      	movs	r3, #8
 8002a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	611a      	str	r2, [r3, #16]
          break;
 8002a2e:	e009      	b.n	8002a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a30:	2308      	movs	r3, #8
 8002a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	615a      	str	r2, [r3, #20]
          break;
 8002a3a:	e003      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          break;
 8002a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2bff      	cmp	r3, #255	@ 0xff
 8002a48:	d801      	bhi.n	8002a4e <HAL_GPIO_Init+0x13a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_Init+0x13e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2bff      	cmp	r3, #255	@ 0xff
 8002a58:	d802      	bhi.n	8002a60 <HAL_GPIO_Init+0x14c>
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_Init+0x152>
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	3b08      	subs	r3, #8
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b1 	beq.w	8002bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a94:	4b4d      	ldr	r3, [pc, #308]	@ (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a4c      	ldr	r2, [pc, #304]	@ (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aac:	4a48      	ldr	r2, [pc, #288]	@ (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	@ (8002bd4 <HAL_GPIO_Init+0x2c0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_GPIO_Init+0x1ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd8 <HAL_GPIO_Init+0x2c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00d      	beq.n	8002afc <HAL_GPIO_Init+0x1e8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bdc <HAL_GPIO_Init+0x2c8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0x1e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	@ (8002be0 <HAL_GPIO_Init+0x2cc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_GPIO_Init+0x1e0>
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002b00:	2300      	movs	r3, #0
 8002b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b12:	492f      	ldr	r1, [pc, #188]	@ (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	492c      	ldr	r1, [pc, #176]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4928      	ldr	r1, [pc, #160]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b54:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4922      	ldr	r1, [pc, #136]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b62:	4b20      	ldr	r3, [pc, #128]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	491e      	ldr	r1, [pc, #120]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4918      	ldr	r1, [pc, #96]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b8a:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4914      	ldr	r1, [pc, #80]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d021      	beq.n	8002be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	490e      	ldr	r1, [pc, #56]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e021      	b.n	8002bf6 <HAL_GPIO_Init+0x2e2>
 8002bb2:	bf00      	nop
 8002bb4:	10320000 	.word	0x10320000
 8002bb8:	10310000 	.word	0x10310000
 8002bbc:	10220000 	.word	0x10220000
 8002bc0:	10210000 	.word	0x10210000
 8002bc4:	10120000 	.word	0x10120000
 8002bc8:	10110000 	.word	0x10110000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40010c00 	.word	0x40010c00
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_GPIO_Init+0x304>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4909      	ldr	r1, [pc, #36]	@ (8002c18 <HAL_GPIO_Init+0x304>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47f ae8e 	bne.w	8002928 <HAL_GPIO_Init+0x14>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	372c      	adds	r7, #44	@ 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e001      	b.n	8002c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	807b      	strh	r3, [r7, #2]
 8002c56:	4613      	mov	r3, r2
 8002c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5a:	787b      	ldrb	r3, [r7, #1]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c60:	887a      	ldrh	r2, [r7, #2]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c66:	e003      	b.n	8002c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	041a      	lsls	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	611a      	str	r2, [r3, #16]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f806 	bl	8002cac <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e12b      	b.n	8002f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fa2a 	bl	8002140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	@ 0x24
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d24:	f001 f960 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8002d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4a81      	ldr	r2, [pc, #516]	@ (8002f34 <HAL_I2C_Init+0x274>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d807      	bhi.n	8002d44 <HAL_I2C_Init+0x84>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a80      	ldr	r2, [pc, #512]	@ (8002f38 <HAL_I2C_Init+0x278>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e006      	b.n	8002d52 <HAL_I2C_Init+0x92>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a7d      	ldr	r2, [pc, #500]	@ (8002f3c <HAL_I2C_Init+0x27c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	bf94      	ite	ls
 8002d4c:	2301      	movls	r3, #1
 8002d4e:	2300      	movhi	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0e7      	b.n	8002f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a78      	ldr	r2, [pc, #480]	@ (8002f40 <HAL_I2C_Init+0x280>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	@ (8002f34 <HAL_I2C_Init+0x274>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d802      	bhi.n	8002d94 <HAL_I2C_Init+0xd4>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	e009      	b.n	8002da8 <HAL_I2C_Init+0xe8>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	4a69      	ldr	r2, [pc, #420]	@ (8002f44 <HAL_I2C_Init+0x284>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	3301      	adds	r3, #1
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002dba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	495c      	ldr	r1, [pc, #368]	@ (8002f34 <HAL_I2C_Init+0x274>)
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	d819      	bhi.n	8002dfc <HAL_I2C_Init+0x13c>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e59      	subs	r1, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ddc:	400b      	ands	r3, r1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_I2C_Init+0x138>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e59      	subs	r1, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df6:	e051      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e04f      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d111      	bne.n	8002e28 <HAL_I2C_Init+0x168>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1e58      	subs	r0, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e012      	b.n	8002e4e <HAL_I2C_Init+0x18e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e58      	subs	r0, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	0099      	lsls	r1, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Init+0x196>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e022      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10e      	bne.n	8002e7c <HAL_I2C_Init+0x1bc>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1e58      	subs	r0, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	440b      	add	r3, r1
 8002e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e7a:	e00f      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	0099      	lsls	r1, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	6809      	ldr	r1, [r1, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002eca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6911      	ldr	r1, [r2, #16]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	000186a0 	.word	0x000186a0
 8002f38:	001e847f 	.word	0x001e847f
 8002f3c:	003d08ff 	.word	0x003d08ff
 8002f40:	431bde83 	.word	0x431bde83
 8002f44:	10624dd3 	.word	0x10624dd3

08002f48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	461a      	mov	r2, r3
 8002f54:	460b      	mov	r3, r1
 8002f56:	817b      	strh	r3, [r7, #10]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fb9e 	bl	800269c <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	f040 80e0 	bne.w	8003130 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2319      	movs	r3, #25
 8002f76:	2201      	movs	r2, #1
 8002f78:	4970      	ldr	r1, [pc, #448]	@ (800313c <HAL_I2C_Master_Transmit+0x1f4>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa92 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e0d3      	b.n	8003132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0x50>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0cc      	b.n	8003132 <HAL_I2C_Master_Transmit+0x1ea>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d007      	beq.n	8002fbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2221      	movs	r2, #33	@ 0x21
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	893a      	ldrh	r2, [r7, #8]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	@ (8003140 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6a3a      	ldr	r2, [r7, #32]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f9ca 	bl	80033a0 <I2C_MasterRequestWrite>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e08d      	b.n	8003132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800302c:	e066      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	6a39      	ldr	r1, [r7, #32]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fb50 	bl	80036d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	2b04      	cmp	r3, #4
 8003044:	d107      	bne.n	8003056 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06b      	b.n	8003132 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d11b      	bne.n	80030d0 <HAL_I2C_Master_Transmit+0x188>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d017      	beq.n	80030d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	6a39      	ldr	r1, [r7, #32]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb47 	bl	8003768 <I2C_WaitOnBTFFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e01a      	b.n	8003132 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d194      	bne.n	800302e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	00100002 	.word	0x00100002
 8003140:	ffff0000 	.word	0xffff0000

08003144 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	@ 0x28
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff faa2 	bl	800269c <HAL_GetTick>
 8003158:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 8111 	bne.w	800338e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4988      	ldr	r1, [pc, #544]	@ (8003398 <HAL_I2C_IsDeviceReady+0x254>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f994 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	e104      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2C_IsDeviceReady+0x50>
 8003190:	2302      	movs	r3, #2
 8003192:	e0fd      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2224      	movs	r2, #36	@ 0x24
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a70      	ldr	r2, [pc, #448]	@ (800339c <HAL_I2C_IsDeviceReady+0x258>)
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f952 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003214:	d103      	bne.n	800321e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0b6      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003230:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003232:	f7ff fa33 	bl	800269c <HAL_GetTick>
 8003236:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	bf0c      	ite	eq
 8003246:	2301      	moveq	r3, #1
 8003248:	2300      	movne	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003266:	e025      	b.n	80032b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003268:	f7ff fa18 	bl	800269c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <HAL_I2C_IsDeviceReady+0x13a>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	22a0      	movs	r2, #160	@ 0xa0
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80032be:	d005      	beq.n	80032cc <HAL_I2C_IsDeviceReady+0x188>
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <HAL_I2C_IsDeviceReady+0x188>
 80032c6:	7dbb      	ldrb	r3, [r7, #22]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0cd      	beq.n	8003268 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d129      	bne.n	8003336 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2319      	movs	r3, #25
 800330e:	2201      	movs	r2, #1
 8003310:	4921      	ldr	r1, [pc, #132]	@ (8003398 <HAL_I2C_IsDeviceReady+0x254>)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8c6 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e036      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e02c      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003344:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800334e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	490f      	ldr	r1, [pc, #60]	@ (8003398 <HAL_I2C_IsDeviceReady+0x254>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f8a2 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e012      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	3301      	adds	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	f4ff af32 	bcc.w	80031de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00100002 	.word	0x00100002
 800339c:	ffff0000 	.word	0xffff0000

080033a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	460b      	mov	r3, r1
 80033ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d006      	beq.n	80033ca <I2C_MasterRequestWrite+0x2a>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d003      	beq.n	80033ca <I2C_MasterRequestWrite+0x2a>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033c8:	d108      	bne.n	80033dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e00b      	b.n	80033f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d107      	bne.n	80033f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f84f 	bl	80034a4 <I2C_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341a:	d103      	bne.n	8003424 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e035      	b.n	8003494 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003430:	d108      	bne.n	8003444 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	e01b      	b.n	800347c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	11db      	asrs	r3, r3, #7
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0306 	and.w	r3, r3, #6
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f063 030f 	orn	r3, r3, #15
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	490e      	ldr	r1, [pc, #56]	@ (800349c <I2C_MasterRequestWrite+0xfc>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f898 	bl	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e010      	b.n	8003494 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4907      	ldr	r1, [pc, #28]	@ (80034a0 <I2C_MasterRequestWrite+0x100>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f888 	bl	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	00010008 	.word	0x00010008
 80034a0:	00010002 	.word	0x00010002

080034a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b4:	e048      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d044      	beq.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7ff f8ed 	bl	800269c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d139      	bne.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10d      	bne.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	e00c      	b.n	8003514 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	43da      	mvns	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	429a      	cmp	r2, r3
 8003518:	d116      	bne.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e023      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10d      	bne.n	800356e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	43da      	mvns	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	e00c      	b.n	8003588 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	43da      	mvns	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	429a      	cmp	r2, r3
 800358c:	d093      	beq.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a6:	e071      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b6:	d123      	bne.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e067      	b.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d041      	beq.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003608:	f7ff f848 	bl	800269c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d302      	bcc.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d136      	bne.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10c      	bne.n	8003642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e00b      	b.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	43da      	mvns	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4013      	ands	r3, r2
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e021      	b.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10c      	bne.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	43da      	mvns	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e00b      	b.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f af6d 	bne.w	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e4:	e034      	b.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f886 	bl	80037f8 <I2C_IsAcknowledgeFailed>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e034      	b.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d028      	beq.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe ffcd 	bl	800269c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11d      	bne.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	d016      	beq.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e007      	b.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d1c3      	bne.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003774:	e034      	b.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f83e 	bl	80037f8 <I2C_IsAcknowledgeFailed>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e034      	b.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d028      	beq.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe ff85 	bl	800269c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11d      	bne.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d016      	beq.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e007      	b.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d1c3      	bne.n	8003776 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380e:	d11b      	bne.n	8003848 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003818:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	f043 0204 	orr.w	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e272      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8087 	beq.w	8003982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003874:	4b92      	ldr	r3, [pc, #584]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b04      	cmp	r3, #4
 800387e:	d00c      	beq.n	800389a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003880:	4b8f      	ldr	r3, [pc, #572]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d112      	bne.n	80038b2 <HAL_RCC_OscConfig+0x5e>
 800388c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d10b      	bne.n	80038b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389a:	4b89      	ldr	r3, [pc, #548]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d06c      	beq.n	8003980 <HAL_RCC_OscConfig+0x12c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d168      	bne.n	8003980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e24c      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ba:	d106      	bne.n	80038ca <HAL_RCC_OscConfig+0x76>
 80038bc:	4b80      	ldr	r3, [pc, #512]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	e02e      	b.n	8003928 <HAL_RCC_OscConfig+0xd4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0x98>
 80038d2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b78      	ldr	r3, [pc, #480]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a77      	ldr	r2, [pc, #476]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0xd4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0xbc>
 80038f6:	4b72      	ldr	r3, [pc, #456]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a71      	ldr	r2, [pc, #452]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xd4>
 8003910:	4b6b      	ldr	r3, [pc, #428]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b68      	ldr	r3, [pc, #416]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a67      	ldr	r2, [pc, #412]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe feb4 	bl	800269c <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe feb0 	bl	800269c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	@ 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e200      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0xe4>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe fea0 	bl	800269c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fe fe9c 	bl	800269c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1ec      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x10c>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800398e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800399a:	4b49      	ldr	r3, [pc, #292]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x18c>
 80039a6:	4b46      	ldr	r3, [pc, #280]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d116      	bne.n	80039e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	4b43      	ldr	r3, [pc, #268]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x176>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1c0      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4939      	ldr	r1, [pc, #228]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	e03a      	b.n	8003a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e8:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <HAL_RCC_OscConfig+0x270>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fe fe55 	bl	800269c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fe fe51 	bl	800269c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1a1      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4927      	ldr	r1, [pc, #156]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe fe34 	bl	800269c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fe fe30 	bl	800269c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e180      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03a      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d019      	beq.n	8003a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b17      	ldr	r3, [pc, #92]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe fe14 	bl	800269c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fe fe10 	bl	800269c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e160      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a96:	2001      	movs	r0, #1
 8003a98:	f000 face 	bl	8004038 <RCC_Delay>
 8003a9c:	e01c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fdfa 	bl	800269c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fe fdf6 	bl	800269c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d908      	bls.n	8003acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e146      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	42420000 	.word	0x42420000
 8003ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	4b92      	ldr	r3, [pc, #584]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e9      	bne.n	8003aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80a6 	beq.w	8003c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b8b      	ldr	r3, [pc, #556]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	4b88      	ldr	r3, [pc, #544]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4a87      	ldr	r2, [pc, #540]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	61d3      	str	r3, [r2, #28]
 8003b02:	4b85      	ldr	r3, [pc, #532]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b82      	ldr	r3, [pc, #520]	@ (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7e      	ldr	r2, [pc, #504]	@ (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fdb7 	bl	800269c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fe fdb3 	bl	800269c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	@ 0x64
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e103      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b75      	ldr	r3, [pc, #468]	@ (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x312>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e02d      	b.n	8003bc2 <HAL_RCC_OscConfig+0x36e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x334>
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a69      	ldr	r2, [pc, #420]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	4b67      	ldr	r3, [pc, #412]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a66      	ldr	r2, [pc, #408]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6213      	str	r3, [r2, #32]
 8003b86:	e01c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x36e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCC_OscConfig+0x356>
 8003b90:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a60      	ldr	r2, [pc, #384]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6213      	str	r3, [r2, #32]
 8003ba8:	e00b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x36e>
 8003baa:	4b5b      	ldr	r3, [pc, #364]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a5a      	ldr	r2, [pc, #360]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6213      	str	r3, [r2, #32]
 8003bb6:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fd67 	bl	800269c <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fd63 	bl	800269c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0b1      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x37e>
 8003bf4:	e014      	b.n	8003c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fd51 	bl	800269c <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe fd4d 	bl	800269c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e09b      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	4b40      	ldr	r3, [pc, #256]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ee      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b3c      	ldr	r3, [pc, #240]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d061      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d146      	bne.n	8003cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c50:	4b33      	ldr	r3, [pc, #204]	@ (8003d20 <HAL_RCC_OscConfig+0x4cc>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe fd21 	bl	800269c <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe fd1d 	bl	800269c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e06d      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c70:	4b29      	ldr	r3, [pc, #164]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c84:	d108      	bne.n	8003c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c86:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4921      	ldr	r1, [pc, #132]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c98:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a19      	ldr	r1, [r3, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	491b      	ldr	r1, [pc, #108]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_RCC_OscConfig+0x4cc>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fcf1 	bl	800269c <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe fced 	bl	800269c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e03d      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x46a>
 8003cdc:	e035      	b.n	8003d4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fcda 	bl	800269c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe fcd6 	bl	800269c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e026      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x498>
 8003d0a:	e01e      	b.n	8003d4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e019      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_OscConfig+0x500>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0d0      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b67      	ldr	r3, [pc, #412]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 0207 	bic.w	r2, r3, #7
 8003d82:	4965      	ldr	r1, [pc, #404]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b63      	ldr	r3, [pc, #396]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0b8      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b59      	ldr	r3, [pc, #356]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a58      	ldr	r2, [pc, #352]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b53      	ldr	r3, [pc, #332]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b50      	ldr	r3, [pc, #320]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	494d      	ldr	r1, [pc, #308]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d040      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d115      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b41      	ldr	r3, [pc, #260]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e073      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3d      	ldr	r3, [pc, #244]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06b      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b39      	ldr	r3, [pc, #228]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4936      	ldr	r1, [pc, #216]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe fc28 	bl	800269c <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fc24 	bl	800269c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e053      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2d      	ldr	r3, [pc, #180]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b27      	ldr	r3, [pc, #156]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d210      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 0207 	bic.w	r2, r3, #7
 8003e8e:	4922      	ldr	r1, [pc, #136]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4916      	ldr	r1, [pc, #88]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	490e      	ldr	r1, [pc, #56]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ee6:	f000 f821 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	490a      	ldr	r1, [pc, #40]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	5ccb      	ldrb	r3, [r1, r3]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <HAL_RCC_ClockConfig+0x1cc>)
 8003f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f02:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_ClockConfig+0x1d0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fb86 	bl	8002618 <HAL_InitTick>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40022000 	.word	0x40022000
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	08006770 	.word	0x08006770
 8003f24:	20000010 	.word	0x20000010
 8003f28:	20000014 	.word	0x20000014

08003f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f46:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d002      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x30>
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x36>
 8003f5a:	e027      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f5e:	613b      	str	r3, [r7, #16]
      break;
 8003f60:	e027      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	4a17      	ldr	r2, [pc, #92]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d010      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f7a:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	0c5b      	lsrs	r3, r3, #17
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	4a11      	ldr	r2, [pc, #68]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8e:	fb03 f202 	mul.w	r2, r3, r2
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	613b      	str	r3, [r7, #16]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fae:	613b      	str	r3, [r7, #16]
      break;
 8003fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb2:	693b      	ldr	r3, [r7, #16]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	007a1200 	.word	0x007a1200
 8003fc8:	08006788 	.word	0x08006788
 8003fcc:	08006798 	.word	0x08006798
 8003fd0:	003d0900 	.word	0x003d0900

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b02      	ldr	r3, [pc, #8]	@ (8003fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	20000010 	.word	0x20000010

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fec:	f7ff fff2 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	@ (800400c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	08006780 	.word	0x08006780

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004014:	f7ff ffde 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0adb      	lsrs	r3, r3, #11
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	@ (8004034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	08006780 	.word	0x08006780

08004038 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004040:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <RCC_Delay+0x34>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <RCC_Delay+0x38>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0a5b      	lsrs	r3, r3, #9
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004054:	bf00      	nop
  }
  while (Delay --);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	60fa      	str	r2, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f9      	bne.n	8004054 <RCC_Delay+0x1c>
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	20000010 	.word	0x20000010
 8004070:	10624dd3 	.word	0x10624dd3

08004074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e076      	b.n	8004174 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004096:	d009      	beq.n	80040ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	61da      	str	r2, [r3, #28]
 800409e:	e005      	b.n	80040ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fe f87a 	bl	80021c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	0c1a      	lsrs	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f002 0204 	and.w	r2, r2, #4
 8004152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418c:	f7fe fa86 	bl	800269c <HAL_GetTick>
 8004190:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
 80041a4:	e12a      	b.n	80043fc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x36>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e122      	b.n	80043fc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_SPI_Transmit+0x48>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e11b      	b.n	80043fc <HAL_SPI_Transmit+0x280>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004212:	d10f      	bne.n	8004234 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004222:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004232:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d007      	beq.n	8004252 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800425a:	d152      	bne.n	8004302 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0xee>
 8004264:	8b7b      	ldrh	r3, [r7, #26]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d145      	bne.n	80042f6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	881a      	ldrh	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800428e:	e032      	b.n	80042f6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d112      	bne.n	80042c4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042c2:	e018      	b.n	80042f6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c4:	f7fe f9ea 	bl	800269c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d803      	bhi.n	80042dc <HAL_SPI_Transmit+0x160>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d102      	bne.n	80042e2 <HAL_SPI_Transmit+0x166>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e082      	b.n	80043fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1c7      	bne.n	8004290 <HAL_SPI_Transmit+0x114>
 8004300:	e053      	b.n	80043aa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Transmit+0x194>
 800430a:	8b7b      	ldrh	r3, [r7, #26]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d147      	bne.n	80043a0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004336:	e033      	b.n	80043a0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d113      	bne.n	800436e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800436c:	e018      	b.n	80043a0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436e:	f7fe f995 	bl	800269c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d803      	bhi.n	8004386 <HAL_SPI_Transmit+0x20a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d102      	bne.n	800438c <HAL_SPI_Transmit+0x210>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e02d      	b.n	80043fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1c6      	bne.n	8004338 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8b0 	bl	8004514 <SPI_EndRxTxTransaction>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004414:	f7fe f942 	bl	800269c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4413      	add	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004424:	f7fe f93a 	bl	800269c <HAL_GetTick>
 8004428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442a:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	0d1b      	lsrs	r3, r3, #20
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443a:	e054      	b.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d050      	beq.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004444:	f7fe f92a 	bl	800269c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d902      	bls.n	800445a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13d      	bne.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004472:	d111      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447c:	d004      	beq.n	8004488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004486:	d107      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044a0:	d10f      	bne.n	80044c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e017      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d19b      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000010 	.word	0x20000010

08004514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2201      	movs	r2, #1
 8004528:	2102      	movs	r1, #2
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff6a 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e013      	b.n	800456e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	@ 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff57 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e000      	b.n	800456e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e041      	b.n	800460c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fd fe4f 	bl	8002240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f000 faad 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e032      	b.n	8004692 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a18      	ldr	r2, [pc, #96]	@ (800469c <HAL_TIM_Base_Start+0x88>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_TIM_Base_Start+0x48>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004646:	d009      	beq.n	800465c <HAL_TIM_Base_Start+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a14      	ldr	r2, [pc, #80]	@ (80046a0 <HAL_TIM_Base_Start+0x8c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_Base_Start+0x48>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a13      	ldr	r2, [pc, #76]	@ (80046a4 <HAL_TIM_Base_Start+0x90>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d111      	bne.n	8004680 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d010      	beq.n	8004690 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	e007      	b.n	8004690 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800

080046a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e03a      	b.n	8004736 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <HAL_TIM_Base_Start_IT+0x98>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x58>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ea:	d009      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x58>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a14      	ldr	r2, [pc, #80]	@ (8004744 <HAL_TIM_Base_Start_IT+0x9c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x58>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a13      	ldr	r2, [pc, #76]	@ (8004748 <HAL_TIM_Base_Start_IT+0xa0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d111      	bne.n	8004724 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b06      	cmp	r3, #6
 8004710:	d010      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	e007      	b.n	8004734 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800

0800474c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0202 	mvn.w	r2, #2
 8004780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9a1 	bl	8004ade <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f994 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9a3 	bl	8004af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0204 	mvn.w	r2, #4
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f97b 	bl	8004ade <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f96e 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f97d 	bl	8004af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d020      	beq.n	8004848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0208 	mvn.w	r2, #8
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f955 	bl	8004ade <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f948 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f957 	bl	8004af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d020      	beq.n	8004894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01b      	beq.n	8004894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0210 	mvn.w	r2, #16
 8004864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2208      	movs	r2, #8
 800486a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f92f 	bl	8004ade <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f922 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f931 	bl	8004af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00c      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0201 	mvn.w	r2, #1
 80048b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f901 	bl	8004aba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00c      	beq.n	80048dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa87 	bl	8004dea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f901 	bl	8004b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0220 	mvn.w	r2, #32
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa5a 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_TIM_ConfigClockSource+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e0b4      	b.n	8004ab2 <HAL_TIM_ConfigClockSource+0x186>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004980:	d03e      	beq.n	8004a00 <HAL_TIM_ConfigClockSource+0xd4>
 8004982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004986:	f200 8087 	bhi.w	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498e:	f000 8086 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x172>
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004996:	d87f      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b70      	cmp	r3, #112	@ 0x70
 800499a:	d01a      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xa6>
 800499c:	2b70      	cmp	r3, #112	@ 0x70
 800499e:	d87b      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b60      	cmp	r3, #96	@ 0x60
 80049a2:	d050      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x11a>
 80049a4:	2b60      	cmp	r3, #96	@ 0x60
 80049a6:	d877      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	d03c      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xfa>
 80049ac:	2b50      	cmp	r3, #80	@ 0x50
 80049ae:	d873      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d058      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x13a>
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d86f      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b30      	cmp	r3, #48	@ 0x30
 80049ba:	d064      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x15a>
 80049bc:	2b30      	cmp	r3, #48	@ 0x30
 80049be:	d86b      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d060      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x15a>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d867      	bhi.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d05c      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x15a>
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d05a      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x15a>
 80049d0:	e062      	b.n	8004a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e2:	f000 f97c 	bl	8004cde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	609a      	str	r2, [r3, #8]
      break;
 80049fe:	e04f      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a10:	f000 f965 	bl	8004cde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a22:	609a      	str	r2, [r3, #8]
      break;
 8004a24:	e03c      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	461a      	mov	r2, r3
 8004a34:	f000 f8dc 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2150      	movs	r1, #80	@ 0x50
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f933 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004a44:	e02c      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a52:	461a      	mov	r2, r3
 8004a54:	f000 f8fa 	bl	8004c4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2160      	movs	r1, #96	@ 0x60
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f923 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004a64:	e01c      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 f8bc 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2140      	movs	r1, #64	@ 0x40
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f913 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004a84:	e00c      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f000 f90a 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004a96:	e003      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e000      	b.n	8004aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a2f      	ldr	r2, [pc, #188]	@ (8004be4 <TIM_Base_SetConfig+0xd0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <TIM_Base_SetConfig+0x30>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b32:	d007      	beq.n	8004b44 <TIM_Base_SetConfig+0x30>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2c      	ldr	r2, [pc, #176]	@ (8004be8 <TIM_Base_SetConfig+0xd4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_Base_SetConfig+0x30>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bec <TIM_Base_SetConfig+0xd8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a22      	ldr	r2, [pc, #136]	@ (8004be4 <TIM_Base_SetConfig+0xd0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_Base_SetConfig+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b64:	d007      	beq.n	8004b76 <TIM_Base_SetConfig+0x62>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	@ (8004be8 <TIM_Base_SetConfig+0xd4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_Base_SetConfig+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	@ (8004bec <TIM_Base_SetConfig+0xd8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d108      	bne.n	8004b88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0d      	ldr	r2, [pc, #52]	@ (8004be4 <TIM_Base_SetConfig+0xd0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d103      	bne.n	8004bbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	611a      	str	r2, [r3, #16]
  }
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800

08004bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0201 	bic.w	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 030a 	bic.w	r3, r3, #10
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0210 	bic.w	r2, r3, #16
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	031b      	lsls	r3, r3, #12
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f043 0307 	orr.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	021a      	lsls	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e046      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d80:	d009      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a12      	ldr	r2, [pc, #72]	@ (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a10      	ldr	r2, [pc, #64]	@ (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e042      	b.n	8004e94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fa4c 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	@ 0x24
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f82b 	bl	8004e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ed6:	f023 030c 	bic.w	r3, r3, #12
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <UART_SetConfig+0x114>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d103      	bne.n	8004f0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f04:	f7ff f884 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	e002      	b.n	8004f12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7ff f86c 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004f10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009a      	lsls	r2, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	4a22      	ldr	r2, [pc, #136]	@ (8004fb4 <UART_SetConfig+0x118>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	0119      	lsls	r1, r3, #4
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009a      	lsls	r2, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f48:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <UART_SetConfig+0x118>)
 8004f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2064      	movs	r0, #100	@ 0x64
 8004f52:	fb00 f303 	mul.w	r3, r0, r3
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	3332      	adds	r3, #50	@ 0x32
 8004f5c:	4a15      	ldr	r2, [pc, #84]	@ (8004fb4 <UART_SetConfig+0x118>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f68:	4419      	add	r1, r3
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009a      	lsls	r2, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f80:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <UART_SetConfig+0x118>)
 8004f82:	fba3 0302 	umull	r0, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	2064      	movs	r0, #100	@ 0x64
 8004f8a:	fb00 f303 	mul.w	r3, r0, r3
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	3332      	adds	r3, #50	@ 0x32
 8004f94:	4a07      	ldr	r2, [pc, #28]	@ (8004fb4 <UART_SetConfig+0x118>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	51eb851f 	.word	0x51eb851f

08004fb8 <__itoa>:
 8004fb8:	1e93      	subs	r3, r2, #2
 8004fba:	2b22      	cmp	r3, #34	@ 0x22
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	d904      	bls.n	8004fcc <__itoa+0x14>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	461c      	mov	r4, r3
 8004fc6:	700b      	strb	r3, [r1, #0]
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bd10      	pop	{r4, pc}
 8004fcc:	2a0a      	cmp	r2, #10
 8004fce:	d109      	bne.n	8004fe4 <__itoa+0x2c>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	da07      	bge.n	8004fe4 <__itoa+0x2c>
 8004fd4:	232d      	movs	r3, #45	@ 0x2d
 8004fd6:	700b      	strb	r3, [r1, #0]
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4240      	negs	r0, r0
 8004fdc:	4421      	add	r1, r4
 8004fde:	f000 f805 	bl	8004fec <__utoa>
 8004fe2:	e7f1      	b.n	8004fc8 <__itoa+0x10>
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	e7f9      	b.n	8004fdc <__itoa+0x24>

08004fe8 <itoa>:
 8004fe8:	f7ff bfe6 	b.w	8004fb8 <__itoa>

08004fec <__utoa>:
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b08b      	sub	sp, #44	@ 0x2c
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	466e      	mov	r6, sp
 8004ff6:	4c1d      	ldr	r4, [pc, #116]	@ (800506c <__utoa+0x80>)
 8004ff8:	f104 0c20 	add.w	ip, r4, #32
 8004ffc:	4637      	mov	r7, r6
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	6861      	ldr	r1, [r4, #4]
 8005002:	3408      	adds	r4, #8
 8005004:	c703      	stmia	r7!, {r0, r1}
 8005006:	4564      	cmp	r4, ip
 8005008:	463e      	mov	r6, r7
 800500a:	d1f7      	bne.n	8004ffc <__utoa+0x10>
 800500c:	7921      	ldrb	r1, [r4, #4]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	7139      	strb	r1, [r7, #4]
 8005012:	1e91      	subs	r1, r2, #2
 8005014:	2922      	cmp	r1, #34	@ 0x22
 8005016:	6038      	str	r0, [r7, #0]
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	d904      	bls.n	8005028 <__utoa+0x3c>
 800501e:	7019      	strb	r1, [r3, #0]
 8005020:	460b      	mov	r3, r1
 8005022:	4618      	mov	r0, r3
 8005024:	b00b      	add	sp, #44	@ 0x2c
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005028:	1e58      	subs	r0, r3, #1
 800502a:	4684      	mov	ip, r0
 800502c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005030:	fb02 5617 	mls	r6, r2, r7, r5
 8005034:	3628      	adds	r6, #40	@ 0x28
 8005036:	446e      	add	r6, sp
 8005038:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800503c:	460c      	mov	r4, r1
 800503e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005042:	462e      	mov	r6, r5
 8005044:	42b2      	cmp	r2, r6
 8005046:	463d      	mov	r5, r7
 8005048:	f101 0101 	add.w	r1, r1, #1
 800504c:	d9ee      	bls.n	800502c <__utoa+0x40>
 800504e:	2200      	movs	r2, #0
 8005050:	545a      	strb	r2, [r3, r1]
 8005052:	1919      	adds	r1, r3, r4
 8005054:	1aa5      	subs	r5, r4, r2
 8005056:	42aa      	cmp	r2, r5
 8005058:	dae3      	bge.n	8005022 <__utoa+0x36>
 800505a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800505e:	780e      	ldrb	r6, [r1, #0]
 8005060:	3201      	adds	r2, #1
 8005062:	7006      	strb	r6, [r0, #0]
 8005064:	f801 5901 	strb.w	r5, [r1], #-1
 8005068:	e7f4      	b.n	8005054 <__utoa+0x68>
 800506a:	bf00      	nop
 800506c:	0800679a 	.word	0x0800679a

08005070 <siprintf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005076:	b500      	push	{lr}
 8005078:	b09c      	sub	sp, #112	@ 0x70
 800507a:	ab1d      	add	r3, sp, #116	@ 0x74
 800507c:	9002      	str	r0, [sp, #8]
 800507e:	9006      	str	r0, [sp, #24]
 8005080:	9107      	str	r1, [sp, #28]
 8005082:	9104      	str	r1, [sp, #16]
 8005084:	4808      	ldr	r0, [pc, #32]	@ (80050a8 <siprintf+0x38>)
 8005086:	4909      	ldr	r1, [pc, #36]	@ (80050ac <siprintf+0x3c>)
 8005088:	f853 2b04 	ldr.w	r2, [r3], #4
 800508c:	9105      	str	r1, [sp, #20]
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	a902      	add	r1, sp, #8
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	f000 f992 	bl	80053bc <_svfiprintf_r>
 8005098:	2200      	movs	r2, #0
 800509a:	9b02      	ldr	r3, [sp, #8]
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	b01c      	add	sp, #112	@ 0x70
 80050a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a4:	b003      	add	sp, #12
 80050a6:	4770      	bx	lr
 80050a8:	2000001c 	.word	0x2000001c
 80050ac:	ffff0208 	.word	0xffff0208

080050b0 <memset>:
 80050b0:	4603      	mov	r3, r0
 80050b2:	4402      	add	r2, r0
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d100      	bne.n	80050ba <memset+0xa>
 80050b8:	4770      	bx	lr
 80050ba:	f803 1b01 	strb.w	r1, [r3], #1
 80050be:	e7f9      	b.n	80050b4 <memset+0x4>

080050c0 <__errno>:
 80050c0:	4b01      	ldr	r3, [pc, #4]	@ (80050c8 <__errno+0x8>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000001c 	.word	0x2000001c

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	2600      	movs	r6, #0
 80050d0:	4d0c      	ldr	r5, [pc, #48]	@ (8005104 <__libc_init_array+0x38>)
 80050d2:	4c0d      	ldr	r4, [pc, #52]	@ (8005108 <__libc_init_array+0x3c>)
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	f000 fc78 	bl	80059d0 <_init>
 80050e0:	2600      	movs	r6, #0
 80050e2:	4d0a      	ldr	r5, [pc, #40]	@ (800510c <__libc_init_array+0x40>)
 80050e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005110 <__libc_init_array+0x44>)
 80050e6:	1b64      	subs	r4, r4, r5
 80050e8:	10a4      	asrs	r4, r4, #2
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	080067fc 	.word	0x080067fc
 8005108:	080067fc 	.word	0x080067fc
 800510c:	080067fc 	.word	0x080067fc
 8005110:	08006800 	.word	0x08006800

08005114 <__retarget_lock_acquire_recursive>:
 8005114:	4770      	bx	lr

08005116 <__retarget_lock_release_recursive>:
 8005116:	4770      	bx	lr

08005118 <_free_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4605      	mov	r5, r0
 800511c:	2900      	cmp	r1, #0
 800511e:	d040      	beq.n	80051a2 <_free_r+0x8a>
 8005120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005124:	1f0c      	subs	r4, r1, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfb8      	it	lt
 800512a:	18e4      	addlt	r4, r4, r3
 800512c:	f000 f8de 	bl	80052ec <__malloc_lock>
 8005130:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <_free_r+0x8c>)
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	b933      	cbnz	r3, 8005144 <_free_r+0x2c>
 8005136:	6063      	str	r3, [r4, #4]
 8005138:	6014      	str	r4, [r2, #0]
 800513a:	4628      	mov	r0, r5
 800513c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005140:	f000 b8da 	b.w	80052f8 <__malloc_unlock>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d908      	bls.n	800515a <_free_r+0x42>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	1821      	adds	r1, r4, r0
 800514c:	428b      	cmp	r3, r1
 800514e:	bf01      	itttt	eq
 8005150:	6819      	ldreq	r1, [r3, #0]
 8005152:	685b      	ldreq	r3, [r3, #4]
 8005154:	1809      	addeq	r1, r1, r0
 8005156:	6021      	streq	r1, [r4, #0]
 8005158:	e7ed      	b.n	8005136 <_free_r+0x1e>
 800515a:	461a      	mov	r2, r3
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b10b      	cbz	r3, 8005164 <_free_r+0x4c>
 8005160:	42a3      	cmp	r3, r4
 8005162:	d9fa      	bls.n	800515a <_free_r+0x42>
 8005164:	6811      	ldr	r1, [r2, #0]
 8005166:	1850      	adds	r0, r2, r1
 8005168:	42a0      	cmp	r0, r4
 800516a:	d10b      	bne.n	8005184 <_free_r+0x6c>
 800516c:	6820      	ldr	r0, [r4, #0]
 800516e:	4401      	add	r1, r0
 8005170:	1850      	adds	r0, r2, r1
 8005172:	4283      	cmp	r3, r0
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	d1e0      	bne.n	800513a <_free_r+0x22>
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4408      	add	r0, r1
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	e7da      	b.n	800513a <_free_r+0x22>
 8005184:	d902      	bls.n	800518c <_free_r+0x74>
 8005186:	230c      	movs	r3, #12
 8005188:	602b      	str	r3, [r5, #0]
 800518a:	e7d6      	b.n	800513a <_free_r+0x22>
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	1821      	adds	r1, r4, r0
 8005190:	428b      	cmp	r3, r1
 8005192:	bf01      	itttt	eq
 8005194:	6819      	ldreq	r1, [r3, #0]
 8005196:	685b      	ldreq	r3, [r3, #4]
 8005198:	1809      	addeq	r1, r1, r0
 800519a:	6021      	streq	r1, [r4, #0]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	6054      	str	r4, [r2, #4]
 80051a0:	e7cb      	b.n	800513a <_free_r+0x22>
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	200007d0 	.word	0x200007d0

080051a8 <sbrk_aligned>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4e0f      	ldr	r6, [pc, #60]	@ (80051e8 <sbrk_aligned+0x40>)
 80051ac:	460c      	mov	r4, r1
 80051ae:	6831      	ldr	r1, [r6, #0]
 80051b0:	4605      	mov	r5, r0
 80051b2:	b911      	cbnz	r1, 80051ba <sbrk_aligned+0x12>
 80051b4:	f000 fbaa 	bl	800590c <_sbrk_r>
 80051b8:	6030      	str	r0, [r6, #0]
 80051ba:	4621      	mov	r1, r4
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 fba5 	bl	800590c <_sbrk_r>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	d103      	bne.n	80051ce <sbrk_aligned+0x26>
 80051c6:	f04f 34ff 	mov.w	r4, #4294967295
 80051ca:	4620      	mov	r0, r4
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	1cc4      	adds	r4, r0, #3
 80051d0:	f024 0403 	bic.w	r4, r4, #3
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d0f8      	beq.n	80051ca <sbrk_aligned+0x22>
 80051d8:	1a21      	subs	r1, r4, r0
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 fb96 	bl	800590c <_sbrk_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d1f2      	bne.n	80051ca <sbrk_aligned+0x22>
 80051e4:	e7ef      	b.n	80051c6 <sbrk_aligned+0x1e>
 80051e6:	bf00      	nop
 80051e8:	200007cc 	.word	0x200007cc

080051ec <_malloc_r>:
 80051ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f0:	1ccd      	adds	r5, r1, #3
 80051f2:	f025 0503 	bic.w	r5, r5, #3
 80051f6:	3508      	adds	r5, #8
 80051f8:	2d0c      	cmp	r5, #12
 80051fa:	bf38      	it	cc
 80051fc:	250c      	movcc	r5, #12
 80051fe:	2d00      	cmp	r5, #0
 8005200:	4606      	mov	r6, r0
 8005202:	db01      	blt.n	8005208 <_malloc_r+0x1c>
 8005204:	42a9      	cmp	r1, r5
 8005206:	d904      	bls.n	8005212 <_malloc_r+0x26>
 8005208:	230c      	movs	r3, #12
 800520a:	6033      	str	r3, [r6, #0]
 800520c:	2000      	movs	r0, #0
 800520e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052e8 <_malloc_r+0xfc>
 8005216:	f000 f869 	bl	80052ec <__malloc_lock>
 800521a:	f8d8 3000 	ldr.w	r3, [r8]
 800521e:	461c      	mov	r4, r3
 8005220:	bb44      	cbnz	r4, 8005274 <_malloc_r+0x88>
 8005222:	4629      	mov	r1, r5
 8005224:	4630      	mov	r0, r6
 8005226:	f7ff ffbf 	bl	80051a8 <sbrk_aligned>
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	4604      	mov	r4, r0
 800522e:	d158      	bne.n	80052e2 <_malloc_r+0xf6>
 8005230:	f8d8 4000 	ldr.w	r4, [r8]
 8005234:	4627      	mov	r7, r4
 8005236:	2f00      	cmp	r7, #0
 8005238:	d143      	bne.n	80052c2 <_malloc_r+0xd6>
 800523a:	2c00      	cmp	r4, #0
 800523c:	d04b      	beq.n	80052d6 <_malloc_r+0xea>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	4639      	mov	r1, r7
 8005242:	4630      	mov	r0, r6
 8005244:	eb04 0903 	add.w	r9, r4, r3
 8005248:	f000 fb60 	bl	800590c <_sbrk_r>
 800524c:	4581      	cmp	r9, r0
 800524e:	d142      	bne.n	80052d6 <_malloc_r+0xea>
 8005250:	6821      	ldr	r1, [r4, #0]
 8005252:	4630      	mov	r0, r6
 8005254:	1a6d      	subs	r5, r5, r1
 8005256:	4629      	mov	r1, r5
 8005258:	f7ff ffa6 	bl	80051a8 <sbrk_aligned>
 800525c:	3001      	adds	r0, #1
 800525e:	d03a      	beq.n	80052d6 <_malloc_r+0xea>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	442b      	add	r3, r5
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	f8d8 3000 	ldr.w	r3, [r8]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	bb62      	cbnz	r2, 80052c8 <_malloc_r+0xdc>
 800526e:	f8c8 7000 	str.w	r7, [r8]
 8005272:	e00f      	b.n	8005294 <_malloc_r+0xa8>
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	1b52      	subs	r2, r2, r5
 8005278:	d420      	bmi.n	80052bc <_malloc_r+0xd0>
 800527a:	2a0b      	cmp	r2, #11
 800527c:	d917      	bls.n	80052ae <_malloc_r+0xc2>
 800527e:	1961      	adds	r1, r4, r5
 8005280:	42a3      	cmp	r3, r4
 8005282:	6025      	str	r5, [r4, #0]
 8005284:	bf18      	it	ne
 8005286:	6059      	strne	r1, [r3, #4]
 8005288:	6863      	ldr	r3, [r4, #4]
 800528a:	bf08      	it	eq
 800528c:	f8c8 1000 	streq.w	r1, [r8]
 8005290:	5162      	str	r2, [r4, r5]
 8005292:	604b      	str	r3, [r1, #4]
 8005294:	4630      	mov	r0, r6
 8005296:	f000 f82f 	bl	80052f8 <__malloc_unlock>
 800529a:	f104 000b 	add.w	r0, r4, #11
 800529e:	1d23      	adds	r3, r4, #4
 80052a0:	f020 0007 	bic.w	r0, r0, #7
 80052a4:	1ac2      	subs	r2, r0, r3
 80052a6:	bf1c      	itt	ne
 80052a8:	1a1b      	subne	r3, r3, r0
 80052aa:	50a3      	strne	r3, [r4, r2]
 80052ac:	e7af      	b.n	800520e <_malloc_r+0x22>
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	bf0c      	ite	eq
 80052b4:	f8c8 2000 	streq.w	r2, [r8]
 80052b8:	605a      	strne	r2, [r3, #4]
 80052ba:	e7eb      	b.n	8005294 <_malloc_r+0xa8>
 80052bc:	4623      	mov	r3, r4
 80052be:	6864      	ldr	r4, [r4, #4]
 80052c0:	e7ae      	b.n	8005220 <_malloc_r+0x34>
 80052c2:	463c      	mov	r4, r7
 80052c4:	687f      	ldr	r7, [r7, #4]
 80052c6:	e7b6      	b.n	8005236 <_malloc_r+0x4a>
 80052c8:	461a      	mov	r2, r3
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d1fb      	bne.n	80052c8 <_malloc_r+0xdc>
 80052d0:	2300      	movs	r3, #0
 80052d2:	6053      	str	r3, [r2, #4]
 80052d4:	e7de      	b.n	8005294 <_malloc_r+0xa8>
 80052d6:	230c      	movs	r3, #12
 80052d8:	4630      	mov	r0, r6
 80052da:	6033      	str	r3, [r6, #0]
 80052dc:	f000 f80c 	bl	80052f8 <__malloc_unlock>
 80052e0:	e794      	b.n	800520c <_malloc_r+0x20>
 80052e2:	6005      	str	r5, [r0, #0]
 80052e4:	e7d6      	b.n	8005294 <_malloc_r+0xa8>
 80052e6:	bf00      	nop
 80052e8:	200007d0 	.word	0x200007d0

080052ec <__malloc_lock>:
 80052ec:	4801      	ldr	r0, [pc, #4]	@ (80052f4 <__malloc_lock+0x8>)
 80052ee:	f7ff bf11 	b.w	8005114 <__retarget_lock_acquire_recursive>
 80052f2:	bf00      	nop
 80052f4:	200007c8 	.word	0x200007c8

080052f8 <__malloc_unlock>:
 80052f8:	4801      	ldr	r0, [pc, #4]	@ (8005300 <__malloc_unlock+0x8>)
 80052fa:	f7ff bf0c 	b.w	8005116 <__retarget_lock_release_recursive>
 80052fe:	bf00      	nop
 8005300:	200007c8 	.word	0x200007c8

08005304 <__ssputs_r>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	461f      	mov	r7, r3
 800530a:	688e      	ldr	r6, [r1, #8]
 800530c:	4682      	mov	sl, r0
 800530e:	42be      	cmp	r6, r7
 8005310:	460c      	mov	r4, r1
 8005312:	4690      	mov	r8, r2
 8005314:	680b      	ldr	r3, [r1, #0]
 8005316:	d82d      	bhi.n	8005374 <__ssputs_r+0x70>
 8005318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800531c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005320:	d026      	beq.n	8005370 <__ssputs_r+0x6c>
 8005322:	6965      	ldr	r5, [r4, #20]
 8005324:	6909      	ldr	r1, [r1, #16]
 8005326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800532a:	eba3 0901 	sub.w	r9, r3, r1
 800532e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005332:	1c7b      	adds	r3, r7, #1
 8005334:	444b      	add	r3, r9
 8005336:	106d      	asrs	r5, r5, #1
 8005338:	429d      	cmp	r5, r3
 800533a:	bf38      	it	cc
 800533c:	461d      	movcc	r5, r3
 800533e:	0553      	lsls	r3, r2, #21
 8005340:	d527      	bpl.n	8005392 <__ssputs_r+0x8e>
 8005342:	4629      	mov	r1, r5
 8005344:	f7ff ff52 	bl	80051ec <_malloc_r>
 8005348:	4606      	mov	r6, r0
 800534a:	b360      	cbz	r0, 80053a6 <__ssputs_r+0xa2>
 800534c:	464a      	mov	r2, r9
 800534e:	6921      	ldr	r1, [r4, #16]
 8005350:	f000 fafa 	bl	8005948 <memcpy>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800535a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	6126      	str	r6, [r4, #16]
 8005362:	444e      	add	r6, r9
 8005364:	6026      	str	r6, [r4, #0]
 8005366:	463e      	mov	r6, r7
 8005368:	6165      	str	r5, [r4, #20]
 800536a:	eba5 0509 	sub.w	r5, r5, r9
 800536e:	60a5      	str	r5, [r4, #8]
 8005370:	42be      	cmp	r6, r7
 8005372:	d900      	bls.n	8005376 <__ssputs_r+0x72>
 8005374:	463e      	mov	r6, r7
 8005376:	4632      	mov	r2, r6
 8005378:	4641      	mov	r1, r8
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	f000 faac 	bl	80058d8 <memmove>
 8005380:	2000      	movs	r0, #0
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	1b9b      	subs	r3, r3, r6
 8005386:	60a3      	str	r3, [r4, #8]
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	4433      	add	r3, r6
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005392:	462a      	mov	r2, r5
 8005394:	f000 fae6 	bl	8005964 <_realloc_r>
 8005398:	4606      	mov	r6, r0
 800539a:	2800      	cmp	r0, #0
 800539c:	d1e0      	bne.n	8005360 <__ssputs_r+0x5c>
 800539e:	4650      	mov	r0, sl
 80053a0:	6921      	ldr	r1, [r4, #16]
 80053a2:	f7ff feb9 	bl	8005118 <_free_r>
 80053a6:	230c      	movs	r3, #12
 80053a8:	f8ca 3000 	str.w	r3, [sl]
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	e7e9      	b.n	800538e <__ssputs_r+0x8a>
	...

080053bc <_svfiprintf_r>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	4698      	mov	r8, r3
 80053c2:	898b      	ldrh	r3, [r1, #12]
 80053c4:	4607      	mov	r7, r0
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	460d      	mov	r5, r1
 80053ca:	4614      	mov	r4, r2
 80053cc:	b09d      	sub	sp, #116	@ 0x74
 80053ce:	d510      	bpl.n	80053f2 <_svfiprintf_r+0x36>
 80053d0:	690b      	ldr	r3, [r1, #16]
 80053d2:	b973      	cbnz	r3, 80053f2 <_svfiprintf_r+0x36>
 80053d4:	2140      	movs	r1, #64	@ 0x40
 80053d6:	f7ff ff09 	bl	80051ec <_malloc_r>
 80053da:	6028      	str	r0, [r5, #0]
 80053dc:	6128      	str	r0, [r5, #16]
 80053de:	b930      	cbnz	r0, 80053ee <_svfiprintf_r+0x32>
 80053e0:	230c      	movs	r3, #12
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	b01d      	add	sp, #116	@ 0x74
 80053ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ee:	2340      	movs	r3, #64	@ 0x40
 80053f0:	616b      	str	r3, [r5, #20]
 80053f2:	2300      	movs	r3, #0
 80053f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f6:	2320      	movs	r3, #32
 80053f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053fc:	2330      	movs	r3, #48	@ 0x30
 80053fe:	f04f 0901 	mov.w	r9, #1
 8005402:	f8cd 800c 	str.w	r8, [sp, #12]
 8005406:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80055a0 <_svfiprintf_r+0x1e4>
 800540a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800540e:	4623      	mov	r3, r4
 8005410:	469a      	mov	sl, r3
 8005412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005416:	b10a      	cbz	r2, 800541c <_svfiprintf_r+0x60>
 8005418:	2a25      	cmp	r2, #37	@ 0x25
 800541a:	d1f9      	bne.n	8005410 <_svfiprintf_r+0x54>
 800541c:	ebba 0b04 	subs.w	fp, sl, r4
 8005420:	d00b      	beq.n	800543a <_svfiprintf_r+0x7e>
 8005422:	465b      	mov	r3, fp
 8005424:	4622      	mov	r2, r4
 8005426:	4629      	mov	r1, r5
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff ff6b 	bl	8005304 <__ssputs_r>
 800542e:	3001      	adds	r0, #1
 8005430:	f000 80a7 	beq.w	8005582 <_svfiprintf_r+0x1c6>
 8005434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005436:	445a      	add	r2, fp
 8005438:	9209      	str	r2, [sp, #36]	@ 0x24
 800543a:	f89a 3000 	ldrb.w	r3, [sl]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 809f 	beq.w	8005582 <_svfiprintf_r+0x1c6>
 8005444:	2300      	movs	r3, #0
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800544e:	f10a 0a01 	add.w	sl, sl, #1
 8005452:	9304      	str	r3, [sp, #16]
 8005454:	9307      	str	r3, [sp, #28]
 8005456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800545a:	931a      	str	r3, [sp, #104]	@ 0x68
 800545c:	4654      	mov	r4, sl
 800545e:	2205      	movs	r2, #5
 8005460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005464:	484e      	ldr	r0, [pc, #312]	@ (80055a0 <_svfiprintf_r+0x1e4>)
 8005466:	f000 fa61 	bl	800592c <memchr>
 800546a:	9a04      	ldr	r2, [sp, #16]
 800546c:	b9d8      	cbnz	r0, 80054a6 <_svfiprintf_r+0xea>
 800546e:	06d0      	lsls	r0, r2, #27
 8005470:	bf44      	itt	mi
 8005472:	2320      	movmi	r3, #32
 8005474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005478:	0711      	lsls	r1, r2, #28
 800547a:	bf44      	itt	mi
 800547c:	232b      	movmi	r3, #43	@ 0x2b
 800547e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005482:	f89a 3000 	ldrb.w	r3, [sl]
 8005486:	2b2a      	cmp	r3, #42	@ 0x2a
 8005488:	d015      	beq.n	80054b6 <_svfiprintf_r+0xfa>
 800548a:	4654      	mov	r4, sl
 800548c:	2000      	movs	r0, #0
 800548e:	f04f 0c0a 	mov.w	ip, #10
 8005492:	9a07      	ldr	r2, [sp, #28]
 8005494:	4621      	mov	r1, r4
 8005496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549a:	3b30      	subs	r3, #48	@ 0x30
 800549c:	2b09      	cmp	r3, #9
 800549e:	d94b      	bls.n	8005538 <_svfiprintf_r+0x17c>
 80054a0:	b1b0      	cbz	r0, 80054d0 <_svfiprintf_r+0x114>
 80054a2:	9207      	str	r2, [sp, #28]
 80054a4:	e014      	b.n	80054d0 <_svfiprintf_r+0x114>
 80054a6:	eba0 0308 	sub.w	r3, r0, r8
 80054aa:	fa09 f303 	lsl.w	r3, r9, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	46a2      	mov	sl, r4
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	e7d2      	b.n	800545c <_svfiprintf_r+0xa0>
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	1d19      	adds	r1, r3, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	9103      	str	r1, [sp, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfbb      	ittet	lt
 80054c2:	425b      	neglt	r3, r3
 80054c4:	f042 0202 	orrlt.w	r2, r2, #2
 80054c8:	9307      	strge	r3, [sp, #28]
 80054ca:	9307      	strlt	r3, [sp, #28]
 80054cc:	bfb8      	it	lt
 80054ce:	9204      	strlt	r2, [sp, #16]
 80054d0:	7823      	ldrb	r3, [r4, #0]
 80054d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80054d4:	d10a      	bne.n	80054ec <_svfiprintf_r+0x130>
 80054d6:	7863      	ldrb	r3, [r4, #1]
 80054d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054da:	d132      	bne.n	8005542 <_svfiprintf_r+0x186>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	3402      	adds	r4, #2
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	9203      	str	r2, [sp, #12]
 80054e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054ea:	9305      	str	r3, [sp, #20]
 80054ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80055a4 <_svfiprintf_r+0x1e8>
 80054f0:	2203      	movs	r2, #3
 80054f2:	4650      	mov	r0, sl
 80054f4:	7821      	ldrb	r1, [r4, #0]
 80054f6:	f000 fa19 	bl	800592c <memchr>
 80054fa:	b138      	cbz	r0, 800550c <_svfiprintf_r+0x150>
 80054fc:	2240      	movs	r2, #64	@ 0x40
 80054fe:	9b04      	ldr	r3, [sp, #16]
 8005500:	eba0 000a 	sub.w	r0, r0, sl
 8005504:	4082      	lsls	r2, r0
 8005506:	4313      	orrs	r3, r2
 8005508:	3401      	adds	r4, #1
 800550a:	9304      	str	r3, [sp, #16]
 800550c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005510:	2206      	movs	r2, #6
 8005512:	4825      	ldr	r0, [pc, #148]	@ (80055a8 <_svfiprintf_r+0x1ec>)
 8005514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005518:	f000 fa08 	bl	800592c <memchr>
 800551c:	2800      	cmp	r0, #0
 800551e:	d036      	beq.n	800558e <_svfiprintf_r+0x1d2>
 8005520:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <_svfiprintf_r+0x1f0>)
 8005522:	bb1b      	cbnz	r3, 800556c <_svfiprintf_r+0x1b0>
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	3307      	adds	r3, #7
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	3308      	adds	r3, #8
 800552e:	9303      	str	r3, [sp, #12]
 8005530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005532:	4433      	add	r3, r6
 8005534:	9309      	str	r3, [sp, #36]	@ 0x24
 8005536:	e76a      	b.n	800540e <_svfiprintf_r+0x52>
 8005538:	460c      	mov	r4, r1
 800553a:	2001      	movs	r0, #1
 800553c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005540:	e7a8      	b.n	8005494 <_svfiprintf_r+0xd8>
 8005542:	2300      	movs	r3, #0
 8005544:	f04f 0c0a 	mov.w	ip, #10
 8005548:	4619      	mov	r1, r3
 800554a:	3401      	adds	r4, #1
 800554c:	9305      	str	r3, [sp, #20]
 800554e:	4620      	mov	r0, r4
 8005550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005554:	3a30      	subs	r2, #48	@ 0x30
 8005556:	2a09      	cmp	r2, #9
 8005558:	d903      	bls.n	8005562 <_svfiprintf_r+0x1a6>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0c6      	beq.n	80054ec <_svfiprintf_r+0x130>
 800555e:	9105      	str	r1, [sp, #20]
 8005560:	e7c4      	b.n	80054ec <_svfiprintf_r+0x130>
 8005562:	4604      	mov	r4, r0
 8005564:	2301      	movs	r3, #1
 8005566:	fb0c 2101 	mla	r1, ip, r1, r2
 800556a:	e7f0      	b.n	800554e <_svfiprintf_r+0x192>
 800556c:	ab03      	add	r3, sp, #12
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	462a      	mov	r2, r5
 8005572:	4638      	mov	r0, r7
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <_svfiprintf_r+0x1f4>)
 8005576:	a904      	add	r1, sp, #16
 8005578:	f3af 8000 	nop.w
 800557c:	1c42      	adds	r2, r0, #1
 800557e:	4606      	mov	r6, r0
 8005580:	d1d6      	bne.n	8005530 <_svfiprintf_r+0x174>
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	065b      	lsls	r3, r3, #25
 8005586:	f53f af2d 	bmi.w	80053e4 <_svfiprintf_r+0x28>
 800558a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800558c:	e72c      	b.n	80053e8 <_svfiprintf_r+0x2c>
 800558e:	ab03      	add	r3, sp, #12
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	462a      	mov	r2, r5
 8005594:	4638      	mov	r0, r7
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <_svfiprintf_r+0x1f4>)
 8005598:	a904      	add	r1, sp, #16
 800559a:	f000 f87d 	bl	8005698 <_printf_i>
 800559e:	e7ed      	b.n	800557c <_svfiprintf_r+0x1c0>
 80055a0:	080067bf 	.word	0x080067bf
 80055a4:	080067c5 	.word	0x080067c5
 80055a8:	080067c9 	.word	0x080067c9
 80055ac:	00000000 	.word	0x00000000
 80055b0:	08005305 	.word	0x08005305

080055b4 <_printf_common>:
 80055b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	4616      	mov	r6, r2
 80055ba:	4698      	mov	r8, r3
 80055bc:	688a      	ldr	r2, [r1, #8]
 80055be:	690b      	ldr	r3, [r1, #16]
 80055c0:	4607      	mov	r7, r0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bfb8      	it	lt
 80055c6:	4613      	movlt	r3, r2
 80055c8:	6033      	str	r3, [r6, #0]
 80055ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055ce:	460c      	mov	r4, r1
 80055d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055d4:	b10a      	cbz	r2, 80055da <_printf_common+0x26>
 80055d6:	3301      	adds	r3, #1
 80055d8:	6033      	str	r3, [r6, #0]
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	0699      	lsls	r1, r3, #26
 80055de:	bf42      	ittt	mi
 80055e0:	6833      	ldrmi	r3, [r6, #0]
 80055e2:	3302      	addmi	r3, #2
 80055e4:	6033      	strmi	r3, [r6, #0]
 80055e6:	6825      	ldr	r5, [r4, #0]
 80055e8:	f015 0506 	ands.w	r5, r5, #6
 80055ec:	d106      	bne.n	80055fc <_printf_common+0x48>
 80055ee:	f104 0a19 	add.w	sl, r4, #25
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	6832      	ldr	r2, [r6, #0]
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	42ab      	cmp	r3, r5
 80055fa:	dc2b      	bgt.n	8005654 <_printf_common+0xa0>
 80055fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	3b00      	subs	r3, #0
 8005604:	bf18      	it	ne
 8005606:	2301      	movne	r3, #1
 8005608:	0692      	lsls	r2, r2, #26
 800560a:	d430      	bmi.n	800566e <_printf_common+0xba>
 800560c:	4641      	mov	r1, r8
 800560e:	4638      	mov	r0, r7
 8005610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005614:	47c8      	blx	r9
 8005616:	3001      	adds	r0, #1
 8005618:	d023      	beq.n	8005662 <_printf_common+0xae>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	6922      	ldr	r2, [r4, #16]
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	2b04      	cmp	r3, #4
 8005624:	bf14      	ite	ne
 8005626:	2500      	movne	r5, #0
 8005628:	6833      	ldreq	r3, [r6, #0]
 800562a:	f04f 0600 	mov.w	r6, #0
 800562e:	bf08      	it	eq
 8005630:	68e5      	ldreq	r5, [r4, #12]
 8005632:	f104 041a 	add.w	r4, r4, #26
 8005636:	bf08      	it	eq
 8005638:	1aed      	subeq	r5, r5, r3
 800563a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800563e:	bf08      	it	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	4293      	cmp	r3, r2
 8005646:	bfc4      	itt	gt
 8005648:	1a9b      	subgt	r3, r3, r2
 800564a:	18ed      	addgt	r5, r5, r3
 800564c:	42b5      	cmp	r5, r6
 800564e:	d11a      	bne.n	8005686 <_printf_common+0xd2>
 8005650:	2000      	movs	r0, #0
 8005652:	e008      	b.n	8005666 <_printf_common+0xb2>
 8005654:	2301      	movs	r3, #1
 8005656:	4652      	mov	r2, sl
 8005658:	4641      	mov	r1, r8
 800565a:	4638      	mov	r0, r7
 800565c:	47c8      	blx	r9
 800565e:	3001      	adds	r0, #1
 8005660:	d103      	bne.n	800566a <_printf_common+0xb6>
 8005662:	f04f 30ff 	mov.w	r0, #4294967295
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	3501      	adds	r5, #1
 800566c:	e7c1      	b.n	80055f2 <_printf_common+0x3e>
 800566e:	2030      	movs	r0, #48	@ 0x30
 8005670:	18e1      	adds	r1, r4, r3
 8005672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800567c:	4422      	add	r2, r4
 800567e:	3302      	adds	r3, #2
 8005680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005684:	e7c2      	b.n	800560c <_printf_common+0x58>
 8005686:	2301      	movs	r3, #1
 8005688:	4622      	mov	r2, r4
 800568a:	4641      	mov	r1, r8
 800568c:	4638      	mov	r0, r7
 800568e:	47c8      	blx	r9
 8005690:	3001      	adds	r0, #1
 8005692:	d0e6      	beq.n	8005662 <_printf_common+0xae>
 8005694:	3601      	adds	r6, #1
 8005696:	e7d9      	b.n	800564c <_printf_common+0x98>

08005698 <_printf_i>:
 8005698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	7e0f      	ldrb	r7, [r1, #24]
 800569e:	4691      	mov	r9, r2
 80056a0:	2f78      	cmp	r7, #120	@ 0x78
 80056a2:	4680      	mov	r8, r0
 80056a4:	460c      	mov	r4, r1
 80056a6:	469a      	mov	sl, r3
 80056a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ae:	d807      	bhi.n	80056c0 <_printf_i+0x28>
 80056b0:	2f62      	cmp	r7, #98	@ 0x62
 80056b2:	d80a      	bhi.n	80056ca <_printf_i+0x32>
 80056b4:	2f00      	cmp	r7, #0
 80056b6:	f000 80d3 	beq.w	8005860 <_printf_i+0x1c8>
 80056ba:	2f58      	cmp	r7, #88	@ 0x58
 80056bc:	f000 80ba 	beq.w	8005834 <_printf_i+0x19c>
 80056c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056c8:	e03a      	b.n	8005740 <_printf_i+0xa8>
 80056ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ce:	2b15      	cmp	r3, #21
 80056d0:	d8f6      	bhi.n	80056c0 <_printf_i+0x28>
 80056d2:	a101      	add	r1, pc, #4	@ (adr r1, 80056d8 <_printf_i+0x40>)
 80056d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005745 	.word	0x08005745
 80056e0:	080056c1 	.word	0x080056c1
 80056e4:	080056c1 	.word	0x080056c1
 80056e8:	080056c1 	.word	0x080056c1
 80056ec:	080056c1 	.word	0x080056c1
 80056f0:	08005745 	.word	0x08005745
 80056f4:	080056c1 	.word	0x080056c1
 80056f8:	080056c1 	.word	0x080056c1
 80056fc:	080056c1 	.word	0x080056c1
 8005700:	080056c1 	.word	0x080056c1
 8005704:	08005847 	.word	0x08005847
 8005708:	0800576f 	.word	0x0800576f
 800570c:	08005801 	.word	0x08005801
 8005710:	080056c1 	.word	0x080056c1
 8005714:	080056c1 	.word	0x080056c1
 8005718:	08005869 	.word	0x08005869
 800571c:	080056c1 	.word	0x080056c1
 8005720:	0800576f 	.word	0x0800576f
 8005724:	080056c1 	.word	0x080056c1
 8005728:	080056c1 	.word	0x080056c1
 800572c:	08005809 	.word	0x08005809
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	1d1a      	adds	r2, r3, #4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6032      	str	r2, [r6, #0]
 8005738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800573c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005740:	2301      	movs	r3, #1
 8005742:	e09e      	b.n	8005882 <_printf_i+0x1ea>
 8005744:	6833      	ldr	r3, [r6, #0]
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	1d19      	adds	r1, r3, #4
 800574a:	6031      	str	r1, [r6, #0]
 800574c:	0606      	lsls	r6, r0, #24
 800574e:	d501      	bpl.n	8005754 <_printf_i+0xbc>
 8005750:	681d      	ldr	r5, [r3, #0]
 8005752:	e003      	b.n	800575c <_printf_i+0xc4>
 8005754:	0645      	lsls	r5, r0, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0xb8>
 8005758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800575c:	2d00      	cmp	r5, #0
 800575e:	da03      	bge.n	8005768 <_printf_i+0xd0>
 8005760:	232d      	movs	r3, #45	@ 0x2d
 8005762:	426d      	negs	r5, r5
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005768:	230a      	movs	r3, #10
 800576a:	4859      	ldr	r0, [pc, #356]	@ (80058d0 <_printf_i+0x238>)
 800576c:	e011      	b.n	8005792 <_printf_i+0xfa>
 800576e:	6821      	ldr	r1, [r4, #0]
 8005770:	6833      	ldr	r3, [r6, #0]
 8005772:	0608      	lsls	r0, r1, #24
 8005774:	f853 5b04 	ldr.w	r5, [r3], #4
 8005778:	d402      	bmi.n	8005780 <_printf_i+0xe8>
 800577a:	0649      	lsls	r1, r1, #25
 800577c:	bf48      	it	mi
 800577e:	b2ad      	uxthmi	r5, r5
 8005780:	2f6f      	cmp	r7, #111	@ 0x6f
 8005782:	6033      	str	r3, [r6, #0]
 8005784:	bf14      	ite	ne
 8005786:	230a      	movne	r3, #10
 8005788:	2308      	moveq	r3, #8
 800578a:	4851      	ldr	r0, [pc, #324]	@ (80058d0 <_printf_i+0x238>)
 800578c:	2100      	movs	r1, #0
 800578e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005792:	6866      	ldr	r6, [r4, #4]
 8005794:	2e00      	cmp	r6, #0
 8005796:	bfa8      	it	ge
 8005798:	6821      	ldrge	r1, [r4, #0]
 800579a:	60a6      	str	r6, [r4, #8]
 800579c:	bfa4      	itt	ge
 800579e:	f021 0104 	bicge.w	r1, r1, #4
 80057a2:	6021      	strge	r1, [r4, #0]
 80057a4:	b90d      	cbnz	r5, 80057aa <_printf_i+0x112>
 80057a6:	2e00      	cmp	r6, #0
 80057a8:	d04b      	beq.n	8005842 <_printf_i+0x1aa>
 80057aa:	4616      	mov	r6, r2
 80057ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80057b0:	fb03 5711 	mls	r7, r3, r1, r5
 80057b4:	5dc7      	ldrb	r7, [r0, r7]
 80057b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ba:	462f      	mov	r7, r5
 80057bc:	42bb      	cmp	r3, r7
 80057be:	460d      	mov	r5, r1
 80057c0:	d9f4      	bls.n	80057ac <_printf_i+0x114>
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d10b      	bne.n	80057de <_printf_i+0x146>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	07df      	lsls	r7, r3, #31
 80057ca:	d508      	bpl.n	80057de <_printf_i+0x146>
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	6861      	ldr	r1, [r4, #4]
 80057d0:	4299      	cmp	r1, r3
 80057d2:	bfde      	ittt	le
 80057d4:	2330      	movle	r3, #48	@ 0x30
 80057d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057de:	1b92      	subs	r2, r2, r6
 80057e0:	6122      	str	r2, [r4, #16]
 80057e2:	464b      	mov	r3, r9
 80057e4:	4621      	mov	r1, r4
 80057e6:	4640      	mov	r0, r8
 80057e8:	f8cd a000 	str.w	sl, [sp]
 80057ec:	aa03      	add	r2, sp, #12
 80057ee:	f7ff fee1 	bl	80055b4 <_printf_common>
 80057f2:	3001      	adds	r0, #1
 80057f4:	d14a      	bne.n	800588c <_printf_i+0x1f4>
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	b004      	add	sp, #16
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f043 0320 	orr.w	r3, r3, #32
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	2778      	movs	r7, #120	@ 0x78
 800580a:	4832      	ldr	r0, [pc, #200]	@ (80058d4 <_printf_i+0x23c>)
 800580c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	6831      	ldr	r1, [r6, #0]
 8005814:	061f      	lsls	r7, r3, #24
 8005816:	f851 5b04 	ldr.w	r5, [r1], #4
 800581a:	d402      	bmi.n	8005822 <_printf_i+0x18a>
 800581c:	065f      	lsls	r7, r3, #25
 800581e:	bf48      	it	mi
 8005820:	b2ad      	uxthmi	r5, r5
 8005822:	6031      	str	r1, [r6, #0]
 8005824:	07d9      	lsls	r1, r3, #31
 8005826:	bf44      	itt	mi
 8005828:	f043 0320 	orrmi.w	r3, r3, #32
 800582c:	6023      	strmi	r3, [r4, #0]
 800582e:	b11d      	cbz	r5, 8005838 <_printf_i+0x1a0>
 8005830:	2310      	movs	r3, #16
 8005832:	e7ab      	b.n	800578c <_printf_i+0xf4>
 8005834:	4826      	ldr	r0, [pc, #152]	@ (80058d0 <_printf_i+0x238>)
 8005836:	e7e9      	b.n	800580c <_printf_i+0x174>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	f023 0320 	bic.w	r3, r3, #32
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	e7f6      	b.n	8005830 <_printf_i+0x198>
 8005842:	4616      	mov	r6, r2
 8005844:	e7bd      	b.n	80057c2 <_printf_i+0x12a>
 8005846:	6833      	ldr	r3, [r6, #0]
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1d18      	adds	r0, r3, #4
 800584c:	6961      	ldr	r1, [r4, #20]
 800584e:	6030      	str	r0, [r6, #0]
 8005850:	062e      	lsls	r6, r5, #24
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	d501      	bpl.n	800585a <_printf_i+0x1c2>
 8005856:	6019      	str	r1, [r3, #0]
 8005858:	e002      	b.n	8005860 <_printf_i+0x1c8>
 800585a:	0668      	lsls	r0, r5, #25
 800585c:	d5fb      	bpl.n	8005856 <_printf_i+0x1be>
 800585e:	8019      	strh	r1, [r3, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	4616      	mov	r6, r2
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	e7bc      	b.n	80057e2 <_printf_i+0x14a>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	2100      	movs	r1, #0
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	6032      	str	r2, [r6, #0]
 8005870:	681e      	ldr	r6, [r3, #0]
 8005872:	6862      	ldr	r2, [r4, #4]
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f859 	bl	800592c <memchr>
 800587a:	b108      	cbz	r0, 8005880 <_printf_i+0x1e8>
 800587c:	1b80      	subs	r0, r0, r6
 800587e:	6060      	str	r0, [r4, #4]
 8005880:	6863      	ldr	r3, [r4, #4]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2300      	movs	r3, #0
 8005886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800588a:	e7aa      	b.n	80057e2 <_printf_i+0x14a>
 800588c:	4632      	mov	r2, r6
 800588e:	4649      	mov	r1, r9
 8005890:	4640      	mov	r0, r8
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	47d0      	blx	sl
 8005896:	3001      	adds	r0, #1
 8005898:	d0ad      	beq.n	80057f6 <_printf_i+0x15e>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d413      	bmi.n	80058c8 <_printf_i+0x230>
 80058a0:	68e0      	ldr	r0, [r4, #12]
 80058a2:	9b03      	ldr	r3, [sp, #12]
 80058a4:	4298      	cmp	r0, r3
 80058a6:	bfb8      	it	lt
 80058a8:	4618      	movlt	r0, r3
 80058aa:	e7a6      	b.n	80057fa <_printf_i+0x162>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4632      	mov	r2, r6
 80058b0:	4649      	mov	r1, r9
 80058b2:	4640      	mov	r0, r8
 80058b4:	47d0      	blx	sl
 80058b6:	3001      	adds	r0, #1
 80058b8:	d09d      	beq.n	80057f6 <_printf_i+0x15e>
 80058ba:	3501      	adds	r5, #1
 80058bc:	68e3      	ldr	r3, [r4, #12]
 80058be:	9903      	ldr	r1, [sp, #12]
 80058c0:	1a5b      	subs	r3, r3, r1
 80058c2:	42ab      	cmp	r3, r5
 80058c4:	dcf2      	bgt.n	80058ac <_printf_i+0x214>
 80058c6:	e7eb      	b.n	80058a0 <_printf_i+0x208>
 80058c8:	2500      	movs	r5, #0
 80058ca:	f104 0619 	add.w	r6, r4, #25
 80058ce:	e7f5      	b.n	80058bc <_printf_i+0x224>
 80058d0:	080067d0 	.word	0x080067d0
 80058d4:	080067e1 	.word	0x080067e1

080058d8 <memmove>:
 80058d8:	4288      	cmp	r0, r1
 80058da:	b510      	push	{r4, lr}
 80058dc:	eb01 0402 	add.w	r4, r1, r2
 80058e0:	d902      	bls.n	80058e8 <memmove+0x10>
 80058e2:	4284      	cmp	r4, r0
 80058e4:	4623      	mov	r3, r4
 80058e6:	d807      	bhi.n	80058f8 <memmove+0x20>
 80058e8:	1e43      	subs	r3, r0, #1
 80058ea:	42a1      	cmp	r1, r4
 80058ec:	d008      	beq.n	8005900 <memmove+0x28>
 80058ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058f6:	e7f8      	b.n	80058ea <memmove+0x12>
 80058f8:	4601      	mov	r1, r0
 80058fa:	4402      	add	r2, r0
 80058fc:	428a      	cmp	r2, r1
 80058fe:	d100      	bne.n	8005902 <memmove+0x2a>
 8005900:	bd10      	pop	{r4, pc}
 8005902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800590a:	e7f7      	b.n	80058fc <memmove+0x24>

0800590c <_sbrk_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	2300      	movs	r3, #0
 8005910:	4d05      	ldr	r5, [pc, #20]	@ (8005928 <_sbrk_r+0x1c>)
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	f7fc fe06 	bl	8002528 <_sbrk>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_sbrk_r+0x1a>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_sbrk_r+0x1a>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	200007c4 	.word	0x200007c4

0800592c <memchr>:
 800592c:	4603      	mov	r3, r0
 800592e:	b510      	push	{r4, lr}
 8005930:	b2c9      	uxtb	r1, r1
 8005932:	4402      	add	r2, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	4618      	mov	r0, r3
 8005938:	d101      	bne.n	800593e <memchr+0x12>
 800593a:	2000      	movs	r0, #0
 800593c:	e003      	b.n	8005946 <memchr+0x1a>
 800593e:	7804      	ldrb	r4, [r0, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	428c      	cmp	r4, r1
 8005944:	d1f6      	bne.n	8005934 <memchr+0x8>
 8005946:	bd10      	pop	{r4, pc}

08005948 <memcpy>:
 8005948:	440a      	add	r2, r1
 800594a:	4291      	cmp	r1, r2
 800594c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005950:	d100      	bne.n	8005954 <memcpy+0xc>
 8005952:	4770      	bx	lr
 8005954:	b510      	push	{r4, lr}
 8005956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800595a:	4291      	cmp	r1, r2
 800595c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005960:	d1f9      	bne.n	8005956 <memcpy+0xe>
 8005962:	bd10      	pop	{r4, pc}

08005964 <_realloc_r>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	4680      	mov	r8, r0
 800596a:	4615      	mov	r5, r2
 800596c:	460c      	mov	r4, r1
 800596e:	b921      	cbnz	r1, 800597a <_realloc_r+0x16>
 8005970:	4611      	mov	r1, r2
 8005972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005976:	f7ff bc39 	b.w	80051ec <_malloc_r>
 800597a:	b92a      	cbnz	r2, 8005988 <_realloc_r+0x24>
 800597c:	f7ff fbcc 	bl	8005118 <_free_r>
 8005980:	2400      	movs	r4, #0
 8005982:	4620      	mov	r0, r4
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	f000 f81a 	bl	80059c0 <_malloc_usable_size_r>
 800598c:	4285      	cmp	r5, r0
 800598e:	4606      	mov	r6, r0
 8005990:	d802      	bhi.n	8005998 <_realloc_r+0x34>
 8005992:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005996:	d8f4      	bhi.n	8005982 <_realloc_r+0x1e>
 8005998:	4629      	mov	r1, r5
 800599a:	4640      	mov	r0, r8
 800599c:	f7ff fc26 	bl	80051ec <_malloc_r>
 80059a0:	4607      	mov	r7, r0
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d0ec      	beq.n	8005980 <_realloc_r+0x1c>
 80059a6:	42b5      	cmp	r5, r6
 80059a8:	462a      	mov	r2, r5
 80059aa:	4621      	mov	r1, r4
 80059ac:	bf28      	it	cs
 80059ae:	4632      	movcs	r2, r6
 80059b0:	f7ff ffca 	bl	8005948 <memcpy>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4640      	mov	r0, r8
 80059b8:	f7ff fbae 	bl	8005118 <_free_r>
 80059bc:	463c      	mov	r4, r7
 80059be:	e7e0      	b.n	8005982 <_realloc_r+0x1e>

080059c0 <_malloc_usable_size_r>:
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f18      	subs	r0, r3, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfbc      	itt	lt
 80059ca:	580b      	ldrlt	r3, [r1, r0]
 80059cc:	18c0      	addlt	r0, r0, r3
 80059ce:	4770      	bx	lr

080059d0 <_init>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr

080059dc <_fini>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr
